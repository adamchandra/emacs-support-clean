# Author: acs
# name: ensime-template
# key: ensime-template
# --
(
:project-name "...."

:project-package "...."

:use-sbt t ;;Assume a standard sbt directory structure. Look in default sbt locations for dependencies, sources, target, etc.

;;;  :use-maven [t or nil] ;;; Use an existing pom.xml to determine the dependencies for the project. A Maven-style directory structure is assumed.
;;;  :use-ivy [t or nil] ;;; Use an existing ivy.xml to determine the dependencies for the project. A Maven-style directory structure is assumed.
;;;  :ivy-file filename ;;; Override the default ivy.xml location.
;;;  
;;;  ;;; Specify the names of dependency profiles to be used for compilation and runtime scenarios. Only necessary if you have custom configurations!
;;;  :ivy-compile-conf "...."
;;;  :ivy-runtime-conf "...."



;;;  :server-root "...." ;;; Absolute path to the root of your ENSIME distribution. Default Inferred from location of ensime.el
;;;  :server-cmd "...." ;;; The command with which to invoke the ENSIME server. By default, this will be set to "bin/server.sh" on Unix systems and "bin/server.bat" on Windows.
;;;  :server-host "...." ;;;The host to connect to. Connecting to remote ENSIME servers is not currently supported (though it may work...)


;;;  ;;;Should ENSIME issue a 'compile' command to sbt whenever you save a file? This is disabled by default as it consumes a lot of CPU.
;;;  :sbt-compile-on-save [t or nil]
;;;  
;;;  ;;; Declare sbt subprojects. Each item in the list should be a property list with the following structure: (:name "myproj" :deps ("otherproj")), where :deps is a possibly empty list of subprojects that this subproject depends on.
;;;  :sbt-subprojects ([sbt-subproject]*)
;;;  ;;; For example, here's how you'd declare two subprojects - a 'web' subproject which depends on a 'core' subproject:
;;;  ;;;     (
;;;  ;;;       :use-sbt t
;;;  ;;;       :sbt-subprojects (
;;;  ;;;          (:name "web" :deps ("core"))
;;;  ;;;          (:name "core" :deps ())
;;;  ;;;       )
;;;  ;;;     )
;;;  
;;;  
;;;  ;;; Manually include source files by directory(recursively) or by filename. If directory is given, only .scala and .java files will be considered.
;;;  :sources ([directory or filename]*)
;;;  
;;;  ;;; Manually include jars by directory(recursively) or by filename, to be included on the compile and runtime classpaths.
;;;  :compile-jars ([directory or filename]*)
;;;  
;;;  ;;; Manually exclude jars by directory(recursively) or by filename. These jars will be excluded from any classpath.
;;;  :exclude-compile-jars ([directory or filename]*)
;;;  
;;;  ;;; Manually include jars by directory(recursively) or by filename, to be included only on the runtime classpath.
;;;  :runtime-jars ([directory or filename]*)
;;;  
;;;  ;;; Manually exclude jars by directory(recursively) or by filename. These jars will be excluded from the runtime classpath.
;;;  :exclude-runtime-jars ([directory or filename]*)
;;;  
;;;  ;;; Manually include directories of .class files, to be included on the compile and runtime classpaths.
;;;  :class-dirs ([directory]*)
;;;  
;;;  ;;; Manually specify the target of the project build process. This directory will be included on the runtime classpath when debugging or using the repl, and will be pupulated by the incremental compiler. Will be created if it doesn't exist.
;;;  :target directory
;;;  
;;;  ;;; Disable the classpath indexing process that happens at startup. This will speed up the loading process significantly, at the cost of breaking some functionality.
;;;  :disable-index-on-startup [ t or nil]
;;;  
;;;  ;;; Classes that match one of the excluded regular expressions will not be added to the index. This can be used to reduce memory usage and speed up loading. For example:
;;;  ;;;    :exclude-from-index ("com\\\\.sun\\\\..\*" "com\\\\.apple\\\\..\*")
;;;  :exclude-from-index (regex-string*)
;;;  
;;;  ;;; Customize the behavior of the source formatter. All Scalariform preferences are supported:
;;;  :formatting-prefs (
;;;      [:alignParameters t]
;;;      [:alignSingleLineCaseStatements t]
;;;      [:alignSingleLineCaseStatements_maxArrowIndent 20] ;;; 1-100
;;;      [:compactStringConcatenation t]
;;;      [:doubleIndentClassDeclaration t]
;;;      [:indentLocalDefs t]
;;;      [:indentPackageBlocks t]
;;;      [:indentSpaces 4] ;;; 1-100
;;;      [:preserveDanglingCloseParenthesis t]
;;;      [:preserveSpaceBeforeArguments t]
;;;      [:rewriteArrowSymbols t]
;;;      [:spaceBeforeColon t]
;;;  )

)
