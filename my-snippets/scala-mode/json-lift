# Author: acs
# name: json-lift
# key: json/lift
# --


// From: https://github.com/json4s/json4s
// deps:
// "org.json4s" %% "json4s-native" % "3.2.5"
// For the Jackson support add the following dependency to your project description:
// "org.json4s" %% "json4s-jackson" % "3.2.5"

// Lift json is native
import org.json4s._
import org.json4s.native.JsonMethods._
// Uncomment to use Jackson impl
// import org.json4s.jackson.JsonMethods._


implicit val formats = DefaultFormats

case class Winner(\`winner-id\`: Long, numbers: List[Int])
case class Lotto(id: Long, \`winning-numbers\`: List[Int], winners: List[Winner], \`draw-date\`: Option[java.util.Date])

val winners = List(Winner(23, List(2, 45, 34, 23, 3, 5)), Winner(54, List(52, 3, 12, 11, 18, 22)))
val lotto = Lotto(5, List(2, 45, 34, 23, 7, 5, 3), winners, None)

// Producing Json via DSL:
// Choose either double or big decimal DSL:
import org.json4s.JsonDSL.WithDouble._
// import org.json4s.JsonDSL.WithBigDecimal._

val json = 
  ("lotto" ->
    ("id" -> lotto.id) ~
    ("winning-numbers" -> lotto.\`winning-numbers\`) ~
    ("draw-date" -> lotto.\`draw-date\`.map(_.toString)) ~
    ("winners" ->
      lotto.winners.map { w =>
        (("winner-id" -> w.\`winner-id\`) ~
         ("numbers" -> w.numbers))}))

// Parsing Json:
val parsed: JsonAST.JValue = parse(""" { "numbers" : [1, 2, 3, 4] } """)

// Rendering Json:
compact(render(parsed)) // => """{"lotto":{"id":5,"winning-numbers":[2,45,34,23,7,5,3],"winners":[{"winner-id":23,"numbers":[2,45,34,23,3,5]},{"winner-id":54,"numbers":[52,3,12,11,18,22]}]}}"""
pretty(render(parsed))

// Extracting values:
//  ...
