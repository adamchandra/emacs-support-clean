;; Object site-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "site-lisp/"
  :tables (list 
   (semanticdb-table "parenface.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("paren-face" variable (:default-value (quote paren-face)) nil [356 387]) ("paren-face" variable (:default-value (quote ((((class color)) (:foreground "DimGray"))))) nil [389 514]) ("paren-face-add-support" function (:arguments ("keywords")) nil [516 820]) ("scheme-font-lock-keywords-2" variable nil nil [871 911]) ("lisp-font-lock-keywords-2" variable nil nil [914 952]) ("add-hook" code nil nil [955 1046]) ("add-hook" code nil nil [1047 1136]) ("add-hook" code nil nil [1137 1226]) ("add-hook" code nil nil [1227 1316]) ("parenface" package nil nil [1318 1338]))
    :file "parenface.el"
    :pointmax 1366
    :unmatched-syntax 'nil
    )
   (semanticdb-table "yaml-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("defgroup" code nil nil [2242 2345]) ("yaml-mode-hook" variable (:user-visible-flag t) nil [2347 2436]) ("yaml-indent-offset" variable (:user-visible-flag t :default-value 2) nil [2438 2550]) ("yaml-backspace-function" variable (:user-visible-flag t :default-value (quote backward-delete-char-untabify)) nil [2552 2726]) ("yaml-block-literal-search-lines" variable (:user-visible-flag t :default-value 100) nil [2728 2875]) ("yaml-block-literal-electric-alist" variable (:user-visible-flag t :default-value (quote ((124 . "") (62 . "-")))) nil [2877 3218]) ("yaml-tab-face" variable (:default-value (quote ((((class color)) (:background "red" :foreground "red" :bold t)) (t (:reverse-video t))))) nil [3220 3425]) ("yaml-mode-version" variable (:constant-flag t :default-value "0.0.3") nil [3442 3504]) ("yaml-blank-line-re" variable (:constant-flag t :default-value "^ *$") nil [3506 3605]) ("yaml-comment-re" variable (:constant-flag t :default-value "\\(#*.*\\)") nil [3607 3713]) ("yaml-directive-re" variable (:constant-flag t :default-value "^\\(?:--- \\)? *%\\(\\w+\\)") nil [3715 3830]) ("yaml-document-delimiter-re" variable (:constant-flag t :default-value "^ *\\(?:---\\|[.][.][.]\\)") nil [3832 3950]) ("yaml-node-anchor-alias-re" variable (:constant-flag t :default-value "[&*]\\w+") nil [3952 4048]) ("yaml-tag-re" variable (:constant-flag t :default-value "!!?[^ 
]+") nil [4050 4117]) ("yaml-bare-scalar-re" variable (:constant-flag t :default-value "\\(?:[^-:,#!
{\\[ ]\\|[^#!
{\\[ ]\\S-\\)[^#
]*?") nil [4119 4244]) ("yaml-hash-key-re" variable (:constant-flag t :default-value (concat "\\(?:^\\(?:--- \\)?\\|{\\|\\(?:[-,] +\\)+\\) *" "\\(?:" yaml-tag-re " +\\)?" "\\(" yaml-bare-scalar-re "\\) *:" "\\(?: +\\|$\\)")) nil [4246 4488]) ("yaml-scalar-context-re" variable (:constant-flag t :default-value (concat "\\(?:^\\(?:--- \\)?\\|{\\|\\(?:[-,] +\\)+\\) *" "\\(?:" yaml-bare-scalar-re " *: \\)?")) nil [4490 4689]) ("yaml-nested-map-re" variable (:constant-flag t :default-value (concat ".*: *\\(?:&.*\\|{ *\\|" yaml-tag-re " *\\)?$")) nil [4691 4840]) ("yaml-block-literal-base-re" variable (:constant-flag t :default-value " *[>|][-+0-9]* *\\(?:
\\|\\'\\)") nil [4842 4974]) ("yaml-block-literal-re" variable (:constant-flag t :default-value (concat yaml-scalar-context-re "\\(?:" yaml-tag-re "\\)?" yaml-block-literal-base-re)) nil [4976 5174]) ("yaml-nested-sequence-re" variable (:constant-flag t :default-value (concat "^\\(?: *- +\\)+" "\\(?:" yaml-bare-scalar-re " *:\\(?: +.*\\)?\\)?$")) nil [5176 5373]) ("yaml-constant-scalars-re" variable (:constant-flag t :default-value (concat "\\(?:^\\|\\(?::\\|-\\|,\\|{\\|\\[\\) +\\) *" (regexp-opt (quote ("~" "null" "Null" "NULL" ".nan" ".NaN" ".NAN" ".inf" ".Inf" ".INF" "-.inf" "-.Inf" "-.INF" "y" "Y" "yes" "Yes" "YES" "n" "N" "no" "No" "NO" "true" "True" "TRUE" "false" "False" "FALSE" "on" "On" "ON" "off" "Off" "OFF")) t) " *$")) nil [5375 5881]) ("yaml-mode-map" variable nil nil [5899 5964]) ("if" code nil nil [5965 6403]) ("yaml-mode-syntax-table" variable nil nil [6405 6486]) ("if" code nil nil [6487 7293]) ("define-derived-mode" code nil nil [7295 7761]) ("yaml-font-lock-keywords" variable (:default-value (list (cons yaml-comment-re (quote (1 font-lock-comment-face))) (cons yaml-constant-scalars-re (quote (1 font-lock-constant-face))) (cons yaml-tag-re (quote (0 font-lock-type-face))) (cons yaml-node-anchor-alias-re (quote (0 font-lock-function-name-face t))) (cons yaml-hash-key-re (quote (1 font-lock-variable-name-face t))) (cons yaml-document-delimiter-re (quote (0 font-lock-comment-face))) (cons yaml-directive-re (quote (1 font-lock-builtin-face))) (quote (yaml-font-lock-block-literals 0 font-lock-string-face t)) (quote ("^[	]+" 0 (quote yaml-tab-face) t)))) nil [7786 8409]) ("yaml-font-lock-syntactic-keywords" variable (:default-value (list (quote (yaml-syntactic-block-literals 0 "." t)))) nil [8411 8561]) ("yaml-font-lock-block-literals" function (:arguments ("bound")) nil [8564 10320]) ("yaml-syntactic-block-literals" function (:arguments ("bound")) nil [10322 11205]) ("yaml-compute-indentation" function nil nil [11242 11825]) ("yaml-indent-line" function (:user-visible-flag t) nil [11827 12615]) ("yaml-electric-backspace" function (:user-visible-flag t :arguments ("arg")) nil [12617 13200]) ("yaml-electric-bar-and-angle" function (:user-visible-flag t :arguments ("arg")) nil [13204 13943]) ("yaml-electric-dash-and-dot" function (:user-visible-flag t :arguments ("arg")) nil [13945 14394]) ("yaml-mode-version" function (:user-visible-flag t) nil [14396 14540]) ("yaml-mode" package nil nil [14542 14562]))
    :file "yaml-mode.el"
    :pointmax 14591
    :unmatched-syntax 'nil
    )
   (semanticdb-table "dired+.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "dired+.el"
    )
   (semanticdb-table "ecmascript-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("font-lock" include nil nil [1578 1598]) ("cc-mode" include nil nil [1599 1617]) ("regexp-opt" include nil nil [1639 1660]) ("ecmascript-mode-version" variable (:constant-flag t :default-value "1.1") nil [1663 1739]) ("defgroup" code nil nil [1741 1854]) ("ecmascript-mode-hook" variable nil nil [1856 1971]) ("ecmascript-mode-map" variable (:default-value (c-make-inherited-keymap)) nil [1973 2073]) ("define-derived-mode" code nil nil [2090 2784]) ("ecmascript-font-lock-default-face" variable (:default-value (quote ecmascript-font-lock-default-face)) nil [2786 2863]) ("ecmascript-font-lock-keywords-1" variable (:constant-flag t :default-value (append java-font-lock-keywords-1 (list (quote ("\\<\\(function\\)\\>\\(?:\\s-+\\(\\sw+\\)\\)?" (1 font-lock-keyword-face t) (2 font-lock-function-name-face nil t))) (quote ("\\<\\(var\\)\\>\\(?:\\s-+\\(\\sw+\\)\\)?" (1 font-lock-keyword-face t) (2 font-lock-variable-name-face nil t)))))) nil [2865 3326]) ("ecmascript-font-lock-keywords-2" variable (:constant-flag t :default-value (append java-font-lock-keywords-2 ecmascript-font-lock-keywords-1 (list (quote ("\\<\\(debugger\\|delete\\|export\\|in\\|typeof\\|with\\)\\>" (1 font-lock-keyword-face t))) (list (concat "\\<\\(" (mapconcat (quote identity) java-font-lock-extra-types nil) "\\)\\>\\.") (quote (1 font-lock-type-face nil t))) (quote ("\\<\\(void\\)\\>\\(?:\\s-+\\(\\sw+\\)\\)?" (1 font-lock-keyword-face t) (2 ecmascript-font-lock-default-face t t))) (quote ("\\<\\(Infinity\\|NaN\\|undefined\\)\\>" 0 font-lock-constant-face t)) (list (concat "\\<Number\\." (regexp-opt (quote ("MAX_VALUE" "MIN_VALUE" "NaN" "NEGATIVE_INFINITY" "POSITIVE_INFINITY")) t) "\\>") (quote (1 font-lock-constant-face))) (list (concat "\\<Math\\." (regexp-opt (quote ("E" "LN10" "LN2" "LOG2E" "LOG10E" "PI" "SQRT1_2" "SQRT2")) t) "\\>") (quote (1 font-lock-constant-face)))))) nil [3328 4686]) ("ecmascript-font-lock-keywords-3" variable (:constant-flag t :default-value (append java-font-lock-keywords-3 ecmascript-font-lock-keywords-2 (list (quote ("\\<Date\\.\\(parse\\|UTC\\)\\>" 1 font-lock-builtin-face)) (list (concat "\\<Math\\." (regexp-opt (quote ("abs" "acos" "asin" "atan" "atan2" "ceil" "cos" "exp" "floor" "log" "max" "min" "pow" "random" "round" "sin" "sqrt" "tan")) t) "\\>") (quote (1 font-lock-builtin-face))) (list (regexp-opt (quote ("decodeURI" "decodeURIComponent" "encodeURI" "encodeURIComponent" "eval" "isFinite" "isNaN" "parseFloat" "parseInt")) (quote words)) (quote (0 font-lock-builtin-face))) (list (concat "\\." (regexp-opt (quote ("hasOwnProperty" "isPrototypeOf" "propertyIsEnumerable" "toLocaleString" "toString" "valueOf" "apply" "call" "concat" "join" "pop" "push" "reverse" "shift" "slice" "sort" "splice" "unshift" "charAt" "charCodeAt" "fromCharCode" "indexOf" "lastIndexOf" "localeCompare" "match" "replace" "search" "split" "substring" "toLocaleLowerCase" "toLocaleUpperCase" "toLowerCase" "toUpperCase" "toExponential" "toFixed" "toPrecision" "getDate" "getDay" "getFullYear" "getHours" "getMilliseconds" "getMinutes" "getMonth" "getSeconds" "getTime" "getTimezoneOffset" "getUTCDate" "getUTCDay" "getUTCFullYear" "getUTCHours" "getUTCMilliseconds" "getUTCMinutes" "getUTCMonth" "getUTCSeconds" "setDate" "setFullYear" "setHours" "setMilliseconds" "setMinutes" "setMonth" "setSeconds" "setTime" "setUTCDate" "setUTCFullYear" "setUTCHours" "setUTCMilliseconds" "setUTCMinutes" "setUTCMonth" "setUTCSeconds" "toDateString" "toLocaleDateString" "toLocaleString" "toLocaleTimeString" "toTimeString" "toUTCString" "exec" "test")) t) "\\>") (quote (1 font-lock-builtin-face)))))) nil [4688 7463]) ("ecmascript-mode" package nil nil [7465 7491]))
    :file "ecmascript-mode.el"
    :pointmax 7526
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ani-fcsh.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("compile" include nil nil [1500 1518]) ("*fcsh-compile-old-compilation-start*" variable nil nil [1520 1641]) ("*fcsh-path*" variable (:default-value "c:\\anihome\\scripts\\fcsh.bat") nil [1643 1750]) ("*fcsh-compile-active*" variable nil nil [1752 1893]) ("*fcsh-mxmlc-command*" variable (:default-value "mxmlc") nil [1895 1984]) ("*fcsh-mxmlc-subsequent-command*" variable (:default-value "compile 1") nil [1986 2107]) ("*fcsh-mxmlc-output-path*" variable (:default-value "..\\bin-debug\\") nil [2109 2343]) ("*fcsh-mxml-file*" variable nil nil [2345 2449]) ("add-to-list" code nil nil [2554 2605]) ("add-to-list" code nil nil [2606 2748]) ("fcsh-compile" function (:user-visible-flag t) nil [2750 3586]) ("fcsh-restore-compile" function (:user-visible-flag t) nil [3588 3868]) ("fcsh-compilation-filter" function (:arguments ("proc" "string")) nil [3870 4907]) ("fcsh-compilation-start" function (:arguments ("command" "&optional" "mode" "name-function" "highlight-regexp")) nil [4910 13000]))
    :file "ani-fcsh.el"
    :pointmax 13001
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ipython.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ipython-version" variable (:constant-flag t :default-value "$Revision: 2927 $") nil [312 381]) ("cl" include nil nil [5541 5554]) ("shell" include nil nil [5555 5571]) ("executable" include nil nil [5572 5593]) ("ansi-color" include nil nil [5594 5615]) ("ipython-command" variable (:user-visible-flag t :default-value "ipython") nil [5617 5729]) ("py-shell-initial-switch-buffers" variable (:default-value t) nil [5760 5885]) ("ipython-backup-of-py-python-command" variable nil nil [5887 5944]) ("ipython-de-input-prompt-regexp" variable (:default-value "\\(?:
In \\[[0-9]+\\]: *.*
----+> \\(.*
\\)[
]?\\)\\|\\(?:
In \\[[0-9]+\\]: *\\(.*
\\)\\)\\|^[ ]\\{3\\}[.]\\{3,\\}: *\\(.*
\\)") nil [5947 6340]) ("ipython-de-output-prompt-regexp" variable (:default-value "^Out\\[[0-9]+\\]: ") nil [6341 6466]) ("if" code nil nil [6469 9800]) ("py-shell" function (:arguments ("around" "py-shell-with-history")) nil [9859 10599]) ("ad-activate" code nil nil [10600 10623]) ("py-execute-region" function (:arguments ("around" "py-execute-buffer-ensure-process")) nil [11038 11381]) ("ad-activate" code nil nil [11382 11414]) ("ipython-to-doctest" function (:user-visible-flag t :arguments ("start" "end")) nil [11416 12553]) ("ipython-completion-command-string" variable (:default-value "print ';'.join(__IP.Completer.all_completions('%s')) #PYTHON-MODE SILENT
") nil [12555 12745]) ("if" code nil nil [12877 18073]) ("ipython-autoindent" variable (:default-value t) nil [18253 18354]) ("ipython-indenting-buffer-name" variable (:default-value "*IPython Indentation Calculation*") nil [18356 18485]) ("ipython-get-indenting-buffer" function nil nil [18487 18752]) ("ipython-indentation-string" variable nil nil [18754 18852]) ("ipython-send-and-indent" function (:user-visible-flag t) nil [18854 19720]) ("ipython-indentation-hook" function (:arguments ("string")) nil [19722 20549]) ("add-hook" code nil nil [20551 20698]) ("define-key" code nil nil [20700 20762]) ("ipython" package nil nil [20793 20811]))
    :file "ipython.el"
    :pointmax 20812
    )
   (semanticdb-table "anything-ipython.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [3376 3389]) ("ipython" include nil nil [3391 3409]) ("define-key" code nil nil [3443 3497]) ("setq" code nil nil [3498 3596]) ("ipython-shell-hook" function (:arguments ("after" "unset-completion-key" "nil" "activate")) nil [3598 3739]) ("anything-ipython-completion-list" function (:user-visible-flag t :arguments ("pattern")) nil [3801 5780]) ("anything-ipyton-default-action" function (:arguments ("elm")) nil [5782 5989]) ("anything-source-ipython" variable (:default-value (quote ((name . "Ipython completion") (candidates lambda nil (condition-case nil (anything-ipython-completion-list anything-pattern) (error nil))) (action . anything-ipyton-default-action) (volatile) (requires-pattern . 2)))) nil [5991 6328]) ("anything-ipython-get-initial-pattern" function nil nil [6370 6646]) ("anything-ipython-complete" function (:user-visible-flag t) nil [6648 6900]) ("anything-ipython-import-modules-from-buffer" function (:user-visible-flag t) nil [6902 7492]) ("anything-ipython" package nil nil [7536 7563]))
    :file "anything-ipython.el"
    :pointmax 7670
    )
   (semanticdb-table "pymacs.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("pymacs-use-hash-tables" variable (:default-value (and (fboundp (quote make-hash-table)) (fboundp (quote gethash)) (fboundp (quote puthash)))) nil [946 1093]) ("if" code nil nil [1116 1381]) ("defalias" code nil nil [1384 1440]) ("pymacs-load-path" variable nil nil [1483 1644]) ("pymacs-trace-transit" variable (:default-value (quote (5000 . 30000))) nil [1646 2087]) ("pymacs-forget-mutability" variable nil nil [2089 2344]) ("pymacs-mutable-strings" variable nil nil [2346 2641]) ("pymacs-timeout-at-start" variable (:default-value 30) nil [2643 2821]) ("pymacs-timeout-at-reply" variable (:default-value 5) nil [2823 2996]) ("pymacs-timeout-at-line" variable (:default-value 2) nil [2998 3168]) ("pymacs-dreadful-zombies" variable nil nil [3170 3344]) ("pymacs-load" function (:user-visible-flag t :arguments ("module" "&optional" "prefix" "noerror")) nil [3346 4486]) ("pymacs-eval" function (:user-visible-flag t :arguments ("text")) nil [4488 4747]) ("pymacs-exec" function (:user-visible-flag t :arguments ("text")) nil [4749 5080]) ("pymacs-call" function (:arguments ("function" "&rest" "arguments")) nil [5082 5515]) ("pymacs-apply" function (:arguments ("function" "arguments")) nil [5517 5927]) ("documentation" function (:arguments ("around" "pymacs-ad-documentation" "activate")) nil [6104 6642]) ("pymacs-python-reference" function (:arguments ("object")) nil [6644 7956]) ("pymacs-file-handler" function (:arguments ("operation" "&rest" "arguments")) nil [8037 9859]) ("pymacs-file-force" function (:arguments ("operation" "arguments")) nil [9861 10205]) ("pymacs-used-ids" variable nil nil [10685 10779]) ("pymacs-weak-hash" variable nil nil [10781 10877]) ("pymacs-gc-wanted" variable nil nil [10879 10974]) ("pymacs-gc-running" variable nil nil [10976 11072]) ("pymacs-gc-timer" variable nil nil [11074 11235]) ("pymacs-schedule-gc" function (:arguments ("&optional" "xemacs-list")) nil [11237 11346]) ("pymacs-garbage-collect" function nil nil [11348 11961]) ("pymacs-defuns" function (:arguments ("arguments")) nil [11963 12605]) ("pymacs-defun" function (:arguments ("index" "interaction")) nil [12607 13512]) ("pymacs-python" function (:arguments ("index")) nil [13514 13944]) ("pymacs-lisp" variable nil nil [14252 14331]) ("pymacs-freed-list" variable nil nil [14333 14404]) ("pymacs-allocate-lisp" function (:arguments ("expression")) nil [14531 15296]) ("pymacs-free-lisp" function (:arguments ("indices")) nil [15298 15736]) ("pymacs-print-for-apply" function (:arguments ("function" "arguments")) nil [15738 16370]) ("pymacs-print-for-eval" function (:arguments ("expression")) nil [16372 19415]) ("pymacs-transit-buffer" variable nil nil [19447 19532]) ("pymacs-start-services" function nil nil [20752 24033]) ("pymacs-terminate-services" function nil nil [24035 24735]) ("pymacs-serve-until-reply" function (:arguments ("action" "inserter")) nil [24737 26965]) ("pymacs-round-trip" function (:arguments ("action" "inserter")) nil [26967 29828]) ("pymacs-interruptible-eval" function (:arguments ("expression")) nil [29830 30527]) ("pymacs-proper-list-p" function (:arguments ("expression")) nil [30529 30733]) ("pymacs" package nil nil [30735 30752]))
    :file "pymacs.el"
    :pointmax 30753
    )
   (semanticdb-table "flymake-cursor.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("show-fly-err-at-point" function (:user-visible-flag t) nil [341 696]) ("fly-pyflake-determine-message" function (:arguments ("err")) nil [698 1151]) ("flymake-goto-next-error" function (:arguments ("after" "display-message" "activate" "compile")) nil [1153 1332]) ("flymake-goto-prev-error" function (:arguments ("after" "display-message" "activate" "compile")) nil [1334 1513]) ("flymake-mode" function (:arguments ("before" "post-command-stuff" "activate" "compile")) nil [1515 1878]))
    :file "flymake-cursor.el"
    :pointmax 1880
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
