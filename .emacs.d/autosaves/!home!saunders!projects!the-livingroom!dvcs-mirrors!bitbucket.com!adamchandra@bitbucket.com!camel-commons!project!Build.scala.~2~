import sbt._
import edu.umass.cs.iesl.sbtbase.Dependencies
import edu.umass.cs.iesl.sbtbase.IeslProject._

import PlayProject._

object CamelCommonsBuild extends Build {

  val vers = "0.1-SNAPSHOT"
  val organization = "cc.rexa2"

  implicit val allDeps: Dependencies = new Dependencies()

  import allDeps._

  override def settings = super.settings ++ org.sbtidea.SbtIdeaPlugin.ideaSettings

//   lazy val camelCommons = (
//     subproject("camel-commons")
//     .settings(
//       organization  := "cc.rexa2",
//       version       := "0.1-SNAPSHOT",
//       (libraryDependencies ++= 
//        Dep.camel("core,scala,test,jms,jetty,http,spring,stream,exec,jsch".split(",").toSeq:_*) ++ 
//        Seq(
//          Dep.jaxbImpl,
//          Dep.junit4, Dep.junit4Runner,
//          Dep.activeMQ, Dep.activeMQCamel, Dep.activeMQPool,
//          Dep.scalateCamel,
//          Dep.liftJson,
//          Dep.xbeanSpring,
//          Dep.scalatest,
//          Dep.specs2
//        )))
//   ) dependsOn (
//     rexaCommons // % "test->test;compile->compile"
//   );


  lazy val camelCommons = {

    val deps : Seq[ModuleID] =
      camel("core,test,jms,jetty,http,scala,spring,stream,exec,jsch".split(",").toSeq: _*)() ++ Seq(
        scalatest(),
        ieslScalaCommons("latest.integration"),
        // "cc.rexa2" %% "rexa-securesocial" % "latest.integration",
        scalazCore(),
        scalazTypelevel(),
        specs2(),
        junit4(),
        typesafeConfig(),
        jaxbImpl(),
        activeMQ(),
        activeMQCamel(),
        activeMQPool()
        // scalatime()
      )

    (Project("camel-commons", file("."))
      .ieslSetup(vers, deps, Public, WithSnapshotDependencies, org = organization, conflict = ConflictStrict)
      .cleanLogging.standardLogging
    )
  }

}


