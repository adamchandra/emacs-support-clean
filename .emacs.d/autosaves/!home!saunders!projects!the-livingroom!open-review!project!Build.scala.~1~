import sbt._
import Keys._
import PlayProject._
import com.typesafe.startscript.StartScriptPlugin
import sbtscalaxb.Plugin._
import sbtscalaxb.Plugin.ScalaxbKeys._

object Build extends sbt.Build {
  import Dependencies._
  import CommonHelpers._

  lazy val rexaCommons = (
    subproject("rexa-commons")
    .settings(
      organization  := "cc.rexa2",
      version       := "0.1-SNAPSHOT",
      (libraryDependencies ++=
       Dep.scalaIO ++
       Seq(
         Dep.specs2,
         Dep.scalazCore,
         Dep.subcut,
         Dep.jdom,
         Dep.typesafeConfig,
         Dep.slf4s,
         Container.logbackClassic
       ))
    )
  );

  lazy val camelCommons = (
    subproject("camel-commons")
    .settings(
      organization  := "cc.rexa2",
      version       := "0.1-SNAPSHOT",
      (libraryDependencies ++= 
       Dep.camel("core,scala,test,jms,jetty,http,spring,stream,exec,jsch".split(",").toSeq:_*) ++ 
       Seq(
         Dep.jaxbImpl,
         Dep.junit4, Dep.junit4Runner,
         Dep.activeMQ, Dep.activeMQCamel, Dep.activeMQPool,
         Dep.scalateCamel,
         Dep.liftJson,
         Dep.xbeanSpring,
         Dep.scalatest,
         Dep.specs2
       )))
  ) dependsOn (
    rexaCommons // % "test->test;compile->compile"
  );


  lazy val rexaRoutes = (
    subproject("rexa-routes")
    .settings(net.virtualvoid.sbt.graph.Plugin.graphSettings: _*)
    .settings(
      organization  := "cc.rexa2",
      version       := "0.1-SNAPSHOT",
      (libraryDependencies ++= 
       Dep.camel("mongodb".split(",").toSeq:_*) ++ 
       Seq(
         Dep.specs2,
         Dep.jaxbImpl,
         Container.logbackClassic
       )))
  ) dependsOn (
    camelCommons // % "test->test;compile->compile",
    // rexaCommons // % "test->test;compile->compile"
  );


  lazy val rexaRoutesDep = (
    subproject("rexa-routes-dep")
    .settings(unpublished:_*)
    .settings(
      organization  := "cc.rexa2",
      version       := "0.1-SNAPSHOT",
      libraryDependencies := Seq("cc.rexa2" %% "rexa-routes" % "0.1-SNAPSHOT")
    ));


  lazy val rexa2Core = (
    subproject("rexa2-core")
      .settings(
        organization  := "cc.rexa2",
        version       := "0.1-SNAPSHOT",
        (libraryDependencies ++= Dep.casbahLibs ++
          Dep.camel("core,exec,scala,solr,lucene,test,jms".split(",").toSeq:_*) ++ // Dep.camel("core,context,exec,lucene,solr,scalate") ++
          Seq(
            Dep.apache.commons.lang3,
            Dep.apache.commons.email,
            Dep.activeMQ, Dep.activeMQCamel, Dep.activeMQPool,
            Dep.unfiltered, Dep.unfilteredScalatest, Dep.unfilteredSpec, Dep.unfilteredNetty, Dep.unfilteredUploads,
            Dep.dispatchCore, Dep.dispatchHttp, Dep.dispatchMime, Dep.dispatchJson,
            Dep.mongodb,
            Dep.redstoneXMLRPC,
            Dep.scalateCore,
            Dep.liftJson, Dep.liftWebkit,
            Dep.scalazCore,
				    Dep.commonsIo,
            Dep.slf4j,
				    Container.servletApi,
            Dep.scalatest,
            Dep.specs2,
            // Dep.jerkson,
            Dep.jdom
          )))
  ) dependsOn (
    camelCommons % "test->test;compile->compile",
    rexaCommons % "test->test;compile->compile"
  );


  // val (rexaAuth, rexaAuthDep) = {
  //   val (devProj, depProj) = playSubproject("rexa-auth", "cc.rexa2", "0.1-SNAPSHOT", JAVA, 
  //     devFn = {p => {
  //       p.settings(
  //         libraryDependencies ++= Seq(
  //           "org.apache.httpcomponents" % "httpclient" % "4.2",
  //           "org.mindrot" % "jbcrypt" % "0.3m",
  //           "commons-lang" % "commons-lang" % "2.6",
  //           "com.typesafe" %% "play-plugins-mailer" % "2.0.3-08072012"
  //         ))
  //     }}
  //   )
  //   (devProj(), depProj())
  // }
  // 
  // 
  // val deadbolt = (
  //   PlayProject(
  //     "deadbolt-2", "1.1.3-SNAPSHOT",
  //     path = file("prj-deadbolt-2"), 
  //     mainLang = JAVA
  //   ).settings(
  //     Settings.publication:_*
  //   ).settings(
  //     organization  := "cc.rexa2"
  //   ))
  // 
  // val (authKickStart, authKickStartDep) = {
  //   val (devProj, depProj) = playSubproject(
  //     "rexa-auth-kickstart", "cc.rexa2", "0.1-SNAPSHOT", JAVA,
  // 
  //     devFn = {p => {
  //       p dependsOn ( 
  //         rexaAuth, 
  //         deadbolt
  //       ) aggregate ( 
  //         rexaAuth 
  //       );
  //     }},
  // 
  //     depFn = {p => {
  //       p.settings(
  //         libraryDependencies ++= Seq(
  //          "cc.rexa2"  %%   "deadbolt-2"        % "1.1.3-SNAPSHOT",
  //          "cc.rexa2"  %%   "rexa-auth"        % "0.1-SNAPSHOT"
  //         )
  //       )
  //     }}
  //   )
  //   (devProj(), depProj())
  // }


  // val (rexa2Front, rexa2FrontDep) = {
  //   val (devProj, depProj) = playSubproject(
  //     "rexa2-front", "cc.rexa2", "0.1-SNAPSHOT", SCALA,
  //     devFn = {p => {
  //       p.settings(
  //         libraryDependencies ++= Seq(
  //           Dep.jasypt,
  //           Dep.specs2
  //         )
  //       ) dependsOn ( 
  //         rexa2Core,
  //         rexaCommons,
  //         rexaAuth,
  //         authKickStart
  //       );
  //     }},
  // 
  //     depFn = {p => {
  //       p.settings(
  //         libraryDependencies ++= Seq(
  //          "cc.rexa2"  %%   "rexa-auth-kickstart" % "0.1-SNAPSHOT"
  //         )
  //       )
  //     }}
  //   )
  //   (devProj(), depProj())
  // }



  // (Settings.compilers ++ scalaxbSettings): _*
  lazy val basicFront = PlayProject(
    "basic-front", "0.1-SNAPSHOT", 
    path = file("prj-basic-front"),
    mainLang = SCALA
  ).settings(
    Settings.compilers:_*
  ).settings(
    organization  := "cc.rexa2",
    resolvers += "teamon.eu repo" at "http://repo.teamon.eu",
    resolvers += "scalajars.org repo" at "http://scalajars.org/repository",
    packageName in scalaxb in Compile := "org.scalajars.lib.maven",
    // xsdSource := new File("http://maven.apache.org/xsd/maven-4.0.0.xsd"),
    // sourceGenerators in Compile <+= scalaxb in Compile,
    // scalajarsProjectName := "scalajars",
    templatesImport ++= Seq(
      "nav.nav",
      "controllers._",
      "lib.core._"
    ),
    resolvers ++= Dependencies.resolutionRepos,
    libraryDependencies ++= Seq(
      Dep.scalateCore,
      "net.debasishg" %% "redisclient" % "2.6",
      "org.scalaz" %% "scalaz-core" % "7.0.0-M3",
      "org.scalaz" %% "scalaz-typelevel" % "7.0.0-M3",
      "eu.teamon" %% "play-scalaz" % "0.1.0-SNAPSHOT",
      "eu.teamon" %% "play-navigator" % "0.4.0"
    )
  )

  // lazy val basicFrontPlugin = Project("sbt-scalajars", file("sbt-scalajars")).settings(commonSettings:_*).settings(
  //   version := "0.1.1",
  //   sbtPlugin := true,
  //   sbtVersion := "0.11.3",
  //   scalajarsProjectName := "scalajars"
  // )


  // val frontPrjs = (
  //   Project("front-prjs", file(".")).settings(unpublished:_*).aggregate(
  //     rexaCommons, camelCommons, 
  //     rexa2Front, rexa2Core, rexaRoutes, 
  //     rexaAuth, authKickStart, deadbolt
  //   ))

}



  //lazy val giraphe = (
  //  subproject("giraphe")
  //  .settings(unpublished:_*)
  //  .settings(
  //    organization  := "cc.rexa2",
  //    version       := "0.1-SNAPSHOT",
  //    (libraryDependencies ++= 
  //     Seq(
  //       Dep.akkaActor,
  //       Dep.commonsIo    ,
  //       Dep.dispatchCore ,
  //       Dep.dispatchHttp ,
  //       Dep.jdom         ,
  //       Dep.jettison     ,
  //       Dep.neo4j        ,
  //       Dep.scalazCore   ,
  //       Dep.sprayJson,
  //       Dep.sprayServer,
  //       Container.servletApi,
  //       Dep.specs2
  //     )))
  //) dependsOn (
  //  rexaCommons % "test->test;compile->compile"
  //);


  //lazy val scrapers = (
  //  subproject("scrapers")
  //  .settings(unpublished:_*)
  //  .settings(
  //    organization  := "cc.rexa2",
  //    version       := "0.1-SNAPSHOT",
  //    initialCommands := {
  //      """
  //      import cc.rexa2.scrape._
  //      """
  //    },
  //    (libraryDependencies ++= 
  //     Dep.camel("mongodb".split(",").toSeq:_*) ++ 
  //     Seq(
  //       Dep.neo4j,
  //       Container.logbackClassic,
  //       Dep.tagsoup,
  //       Dep.html5parser  
  //     )))
  //) dependsOn (
  //  rexaCommons % "test->test;compile->compile",
  //  camelCommons % "test->test;compile->compile", 
  //  giraphe % "test->test;compile->compile"
  //);


//   val rexa2Front = (
//     PlayProject("rexa2-front", "0.1-SNAPSHOT", 
//                 path = file("prj-rexa2-front"), 
//                 mainLang = SCALA) 
//     .settings(
//       organization  := "cc.rexa2",
//       resolvers ++= Dependencies.resolutionRepos
//     )
//     .settings(Settings.publication:_*)
//     .settings(ebeanEnabled := true)
//     .settings(
//       (libraryDependencies ++= 
//        Seq(
//          "be.objectify"  %   "deadbolt-2_2.9.1"        % "1.1.2", 
//          Dep.jasypt,
//          Dep.specs2
//        )))
//   ) dependsOn (
//     secureSocial,
//     rexaCommons,
//     rexa2Core
//   );


//   val rexa2FrontDeploy = (
//     PlayProject("rexa2-front-dep", "0.1-SNAPSHOT", 
//                 path = file("prj-rexa2-front-dep"), 
//                 mainLang = SCALA) 
//     .settings(
//       resolvers ++= Dependencies.resolutionRepos
//     )
//     .settings(ebeanEnabled := true)
//     .settings(unpublished:_*)
//     .settings(
//       (libraryDependencies ++= 
//        Seq(
//          // "cc.rexa2" %% "rexa-auth-kickstart" % "0.1-SNAPSHOT",
//          "cc.rexa2" %% "rexa-commons" % "0.1-SNAPSHOT",
//          "cc.rexa2" %% "rexa2-core" % "0.1-SNAPSHOT",
//          "cc.rexa2" %% "rexa2-front" % "0.1-SNAPSHOT"
//        )))
//   ) 


  // def playSubproject(name:String, org:String, ver:String, lang:String=SCALA) = {
  //   PlayProject(name, ver, 
  //     path = file("prj-"+name+"/dev"), 
  //     mainLang = lang) 
  //       .settings(
  //         organization  := org,
  //         resolvers ++= Dependencies.resolutionRepos,
  //         ebeanEnabled := true
  //       ).settings(
  //         Settings.publication:_*
  //       )
  // }
  // 
  // def playDepProject(proj:Project): Project = {
  //   proj.copy(
  //     id = name,
  //     // base = base((p => file(p, "dep"))),
 	//     settings = settings ++ unpublished
  //   )
  // }


// //   .settings(
// //     publishArtifact in (Compile, packageDoc) := false
// //   )


//         baseDirectory ~= {(d) => 
//           val path = d.getPath;
//           file(path.substring(0, path.length-4)+"/dep"))

  // def playDepProject(proj:Project): Project = {
	//   proj.copy(
  //     id: String = id, 
  //     base: File = base, 
  //     aggregate: => Seq[ProjectReference] = aggregate, 
  //     dependencies: => Seq[ClasspathDep[ProjectReference]] = dependencies, 
  //     delegates: => Seq[ProjectReference] = delegates,
	// 	  settings: Seq[Project.Setting[_]] = settings, 
  //     configurations: Seq[Configuration] = configurations)
  // }
