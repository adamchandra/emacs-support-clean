package edu.umass.cs.iesl.scalacommons

trait UriUtils {
  import scalacommons.util._

  def fmtUrlParams(ps: (String, String)*): String =
    (ps map {case (a,b) => a+"="+b}).mkString("&")
  

  def joinParamStrs(s:String, ss:String*): String = 
    (s :: ss.toList).mkString("&")

  val addParam: (String, String) => String => String =
    (a, b) => s  => joinParamStrs(s, fmtUrlParams(a -> b))


  /**
   * Creates a URI using a path and optional query string
   */
  def uri(path: String, query: String = "") = {
    if (query != null && query.length > 0) {
      val separator = if (path.contains("?")) "&" else "?"
      path + separator + query
    }
    else {
      path
    }
  }

  /**
   * Combines the URI path, query string with additional query terms which will avoid duplicates
   */
  def uriPlus(path: String, query: String, addQuery: String)= {
    val newQuery = (splitQuery(query) ++ splitQuery(addQuery)).distinct
    uri(path, joinQuery(newQuery))

  }

  /**
   * Removes the given query terms from the query string if they are there
   */
  def uriMinus(path: String, query: String, removeQuery: String)= {
    val remove = splitQuery(removeQuery)
    val newQuery = splitQuery(query).filter(!remove.contains(_))
    uri(path, joinQuery(newQuery))
  }

  /**
   * Split a query expression into separate clauses
   */
  protected def splitQuery(query:String): Seq[String] = if (query != null && query.length > 0) query.split("&").toSeq else Nil

  protected def joinQuery(queryArgs: Seq[String]) = queryArgs.mkString("&")
}

object UrlUtils extends UrlUtils
