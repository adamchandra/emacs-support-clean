package play.api.mvc.scalate

import play.api.Play
import play.api.classloading.enhancers.LocalvariablesNamesEnhancer.LocalVariablesNamesTracer
import play.api.exceptions.{UnexpectedException,PlayException,TemplateNotFoundException}

import play.api.data.validation._
import validation.{ValidationError, Valid, Invalid, Constraint}
// import play.api.data.validation.Validation
import org.fusesource.scalate._
import org.fusesource.scalate.support.FileResourceLoader
import java.io.{StringWriter,PrintWriter}
import java.io.{File}
import org.fusesource.scalate.util.SourceCodeHelper
import play.api.vfs.{VirtualFile => VFS}
import scala.collection.JavaConversions._
import play.api.mvc.results.ScalateResult
// import play.api.mvc.{Scope, Http}

import Play.current

trait Provider {
  
  def renderWithScalate(templateName: String = null, args: Seq[Any] = Seq[Any]()){
    //determine template
    val _templateName:String =
      if(templateName!=null){
        templateName
      }
      else if (args.length > 0 && args(0).isInstanceOf[String] &&
        LocalVariablesNamesTracer.getAllLocalVariableNames(args(0)).isEmpty) {
        discardLeadingAt(args(0).toString)
      } else {
        determineURI()
      }
    if (shouldRenderWithScalate(_templateName)) {
      renderScalateTemplate(_templateName, args)
    } else {
      throw new RuntimeException("could not find scalate template")
    }
  }

  val bytecodeDirectory: Option[File] = None

  // Create and configure the Scalate template engine
  private def initEngine(usePlayClassloader:Boolean = true, customImports: String="import controllers._;import models._;import play.api.utils._" ):TemplateEngine = {
    val engine = new TemplateEngine {
      override def bytecodeDirectory = 
        Provider.this.bytecodeDirectory.getOrElse(super.bytecodeDirectory)
    }

    val playcontext = SourceCodeHelper.name(PlayContext.getClass).dropRight(1)+".type"
    engine.bindings = List(
      Binding("context", SourceCodeHelper.name(classOf[DefaultRenderContext]), true),
      Binding("playcontext", playcontext, true)
    )
    engine.importStatements ++= List(customImports)
    if (Play.mode == Play.Mode.PROD && Play.configuration.getString("scalate.allowReloadInProduction") == null ) engine.allowReload = false

    engine.workingDirectory = Play.getFile("/tmp")

    engine.resourceLoader = new FileResourceLoader(Some(Play.getFile("/app/views")))
    val classpathRoot = if (Play.getFile("/precompiled/java").exists && Play.mode == Play.Mode.PROD)
                          Play.getFile("/precompiled/java").toString
                        else
                          Play.getFile("/tmp/classes").toString
    engine.classpath = classpathRoot
    engine.combinedClassPath = true
    val renderMode = Play.configuration.getString("scalate")
    engine.layoutStrategy = new layout.DefaultLayoutStrategy(engine,"/default."+renderMode) 
    if (usePlayClassloader) engine.classLoader = Play.classloader
    engine
  }
  val engine = initEngine()
  
  //def defaultTemplate = Http.Request.current().action
  //def requestFormat = Http.Request.current().format 
  //def controller = Http.Request.current().controller
  //def validationErrors = Validation.errors

    
  private def errorTemplate:String = {
    val fullPath = Play.getFile("/app/views/errors/500.scaml").toString 
    fullPath.replace(Play.getFile("/app/views").toString,"")
  }
  
  private def renderScalateTemplate(templateName:String, args:Seq[Any]) {
    val renderMode = Play.configuration.getString("scalate")
    //loading template
    val buffer = new StringWriter()
    var context = new DefaultRenderContext(engine, new PrintWriter(buffer))
    val renderArgs = Scope.RenderArgs.current()
    // try to fill context
    for (o <-args) {
      for (name <-LocalVariablesNamesTracer.getAllLocalVariableNames(o).iterator) {
        context.attributes(name) = o
      }   
    }        
    context.attributes("playcontext") = PlayContext

    // now add renderArgs as well
    if (renderArgs != null && renderArgs.data != null) {
      for (pair <- renderArgs.data) context.attributes(pair._1) = pair._2
    }
    
    try {
      context.attributes("errors") = validationErrors
    } catch { case ex:Exception => throw new UnexpectedException(ex)}
    
    try {
      val baseName = templateName.replaceAll(".html", "."+renderMode)
      val templatePath = Play.getFile("/app/views/"+baseName).toString.replace(Play.getFile("/app/views").toString,"")
      engine.layout(templatePath, context)
    } catch {
      case ex:TemplateNotFoundException => {
        if(ex.isSourceAvailable) {
          throw ex

        }
        val element = PlayException.getInterestingStrackTraceElement(ex)
        if (element != null) {
          throw new TemplateNotFoundException(templateName, Play.classes.getApplicationClass(element.getClassName()), element.getLineNumber());
        } else {
          throw ex
        }
      }  
      case ex:InvalidSyntaxException => handleSpecialError(context,ex)
      case ex:CompilerException => handleSpecialError(context,ex)
      case ex:Exception => handleSpecialError(context,ex)
    } finally {throw new ScalateResult(buffer.toString,templateName) }
  }
  
  private def handleSpecialError(context:DefaultRenderContext,ex:Exception) {
    context.attributes("javax.servlet.error.exception") = ex
    context.attributes("javax.servlet.error.message") = ex.getMessage
    try {
      engine.layout(engine.load(errorTemplate), context)
    } catch {
      case ex:Exception =>
        // TODO use logging API from Play here...
        println("Caught: " + ex)
      ex.printStackTrace

    }
  }
  //determine if we need to render with scalate
  private def shouldRenderWithScalate(template:String):Boolean = {
    val ignore = Play.configuration.getBoolean("scalate.ignore") 
    if (Play.configuration.containsKey("scalate")) {
      if (ignore != null) {
        ignore.split(",").filter(template.startsWith(_)).size == 0
      } else true
    } else false 
  }

  private def discardLeadingAt(templateName:String):String = {
    if(templateName.startsWith("@")) {
      if(!templateName.contains(".")) {
        determineURI(controller + "." + templateName.substring(1))
      }
      determineURI(templateName.substring(1))
    } else templateName
  }

  private def determineURI(template:String = defaultTemplate):String = {
    template.replace(".", "/") + "." + 
    (if (requestFormat == null)  "html" else requestFormat)
  }


}
