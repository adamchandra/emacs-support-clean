(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(auto-install-directory "~/emacs/auto-install-lisp")
 '(auto-install-install-confirm t)
 '(auto-install-replace-confirm t)
 '(case-fold-search t)
 '(current-language-environment "Latin-1")
 '(default-input-method "latin-1-prefix")
 '(dired-details-hide-link-targets nil)
 '(dired-details-initially-hide nil)
 '(dired-listing-switches "-ABl")
 '(face-font-family-alternatives (quote (("mono" "dejavu" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))
 '(face-font-selection-order (quote (:width :height :weight :slant)))
 '(fill-column 100)
 '(focus-follows-mouse nil)
 '(global-font-lock-mode t nil (font-lock))
 '(hippie-expand-try-functions-list (quote (try-expand-all-abbrevs try-expand-list try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill)))
 '(ibuffer-saved-filter-groups nil)
 '(ibuffer-saved-filters (quote (("test-filters" ((or (filename . "perl") (mode . dired-mode)))) ("gnus" ((or (mode . message-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode)))) ("programming" ((or (mode . emacs-lisp-mode) (mode . cperl-mode) (mode . c-mode) (mode . java-mode) (mode . idl-mode) (mode . lisp-mode)))))))
 '(icicle-buffers-ido-like-flag t)
 '(icicle-download-dir "~/emacs/site-lisp/icicles")
 '(icomplete-mode nil nil (icomplete))
 '(ido-case-fold t)
 '(indent-tabs-mode t)
 '(jde-build-function (quote (jde-ant-build)))
 '(jde-compiler (quote (("eclipse java compiler server" "/usr/sen/tmp1/saunders/home.local/bin/eclipse-versions/eclipse-SDK-3.4.1-linux-gtk/plugins/org.eclipse.jdt.core_3.4.2.v_883_R34x.jar"))))
 '(jde-debugger (quote ("JDEbug")))
 '(jde-jdk-registry (quote (("1.5.0_06" . "/exp/rcf/share/X11R5/jdk1.5.0_06/"))))
 '(line-number-mode t)
 '(menu-bar-mode nil)
 '(mouse-wheel-mode t nil (mwheel))
 '(nxml-child-indent 4)
 '(nxml-outline-child-indent 4)
 '(org-agenda-files (quote ("~/journal.org")))
 '(org-drawers (quote ("PROPERTIES" "CLOCK" "LOGBOOK" "HIDDEN" "MORE")))
 '(org-fontify-done-headline t)
 '(org-fontify-emphasized-text t)
 '(org-hide-leading-stars t)
 '(org-highlight-latex-fragments-and-specials t)
 '(org-modules (quote (org-bbdb org-bibtex org-info org-jsinfo org-irc org-mew org-mhe org-rmail org-vm org-wl org-w3m)))
 '(org-odd-levels-only t)
 '(org-replace-disputed-keys t)
 '(org-startup-align-all-tables t)
 '(org-startup-folded nil)
 '(sgml-basic-offset 4)
 '(show-paren-mode t nil (paren))
 '(show-paren-style (quote expression))
 '(tab-width 2)
 '(tool-bar-mode nil nil (tool-bar))
 '(transient-mark-mode t)
 '(truncate-lines t)
 '(yas/prompt-functions (quote (yas/ido-prompt yas/dropdown-prompt)))
 '(yas/trigger-key ""))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "Beige" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 130 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
 '(bold ((t (:weight extra-bold))))
 '(comint-highlight-prompt ((t (:foreground "light blue"))))
 '(compilation-info ((((class color) (min-colors 16) (background light)) (:foreground "gray" :weight bold))))
 '(cperl-array-face ((t (:foreground "yellow" :weight bold))))
 '(cperl-hash-face ((t (:foreground "lightblue" :slant italic :weight bold))))
 '(cperl-nonoverridable-face ((((class color) (background light)) (:foreground "darkgreen"))))
 '(cursor ((t (:background "white" :foreground "black"))))
 '(diredp-dir-priv ((t (:foreground "DarkRed"))))
 '(diredp-exec-priv ((t (:foreground "green1"))))
 '(diredp-file-name ((t (:foreground "LightBlue"))))
 '(diredp-file-suffix ((t nil)))
 '(diredp-flag-mark ((t (:foreground "Yellow"))))
 '(diredp-flag-mark-line ((t (:foreground "yellow"))))
 '(diredp-no-priv ((t nil)))
 '(diredp-other-priv ((t nil)))
 '(diredp-read-priv ((t nil)))
 '(diredp-write-priv ((t (:foreground "green3"))))
 '(ediff-current-diff-A ((((class color) (min-colors 16)) (:background "grey50" :foreground "yellow"))))
 '(ediff-current-diff-B ((((class color) (min-colors 16)) (:background "grey50" :foreground "yellow"))))
 '(ediff-even-diff-A ((((class color) (min-colors 16)) (:foreground "yellow2"))))
 '(ediff-even-diff-B ((((class color) (min-colors 16)) (:foreground "yellow2"))))
 '(ediff-fine-diff-A ((((class color) (min-colors 16)) (:background "grey40" :foreground "red2"))))
 '(ediff-fine-diff-B ((((class color) (min-colors 16)) (:background "grey40" :foreground "red2"))))
 '(ediff-odd-diff-A ((((class color) (min-colors 16)) (:foreground "yellow2"))))
 '(ediff-odd-diff-B ((((class color) (min-colors 16)) (:foreground "yellow2"))))
 '(fixed-pitch ((t (:family "Bitstream Vera Sans Mono"))))
 '(flymake-errline ((((class color)) (:foreground "red" :box (:line-width 1 :color "red" :style released-button)))))
 '(flymake-warnline ((((class color)) (:underline "yellow"))))
 '(font-lock-builtin-face ((((class color) (min-colors 88) (background dark)) (:foreground "SteelBlue"))))
 '(font-lock-comment-face ((t (:foreground "gray70" :slant italic))))
 '(font-lock-constant-face ((t (:foreground "lightgreen"))))
 '(font-lock-doc-face ((t (:foreground "gray70" :slant italic))))
 '(font-lock-function-name-face ((((class color) (min-colors 88) (background dark)) (:foreground "yellow2"))))
 '(font-lock-keyword-face ((((class color) (min-colors 88) (background dark)) (:foreground "yellow"))))
 '(font-lock-string-face ((t (:foreground "lightgreen"))))
 '(font-lock-type-face ((((class color) (min-colors 88) (background dark)) (:foreground "LightBlue"))))
 '(font-lock-variable-name-face ((((class color) (min-colors 88) (background dark)) (:foreground "yellow2"))))
 '(global-semantic-idle-completions-mode t nil (semantic-idle))
 '(global-semantic-mru-bookmark-mode t nil (semantic-util-modes))
 '(global-senator-minor-mode t nil (senator))
 '(icicle-search-main-regexp-others ((((background dark)) (:background "#324"))))
 '(inhibit-startup-screen t)
 '(italic ((t (:foreground "Yellow1" :slant italic))))
 '(jde-java-font-lock-link-face ((t (:foreground "yellow" :underline t :slant normal))))
 '(jde-java-font-lock-operator-face ((((class color)) (:foreground "light blue"))))
 '(jde-java-font-lock-package-face ((((class color) (background light)) (:foreground "white"))))
 '(match ((((class color) (min-colors 88) (background light)) (:foreground "red"))))
 '(minibuffer-prompt ((t (:foreground "white"))))
 '(mode-line ((t (:background "blue" :foreground "white" :weight normal))))
 '(mode-line-inactive ((default (:inherit mode-line)) (nil (:background "grey" :foreground "blue"))))
 '(nxml-comment-content-face ((t (:foreground "#228822" :slant italic))))
 '(nxml-delimiter-face ((((class color) (background dark)) (:foreground "gray30"))))
 '(nxml-heading-face ((t (:foreground "yellow3" :weight bold))))
 '(nxml-name-face ((nil (:foreground "#FE99EE"))))
 '(org-agenda-restriction-lock ((((class color) (min-colors 88) (background light)) (:background "yellow"))))
 '(org-agenda-structure ((((class color) (min-colors 88) (background light)) (:foreground "green"))))
 '(org-code ((((class color grayscale) (min-colors 88) (background light)) (:foreground "lightblue"))))
 '(org-drawer ((((class color) (min-colors 88) (background light)) (:foreground "Lightblue"))))
 '(org-hide ((nil (:foreground "grey30"))))
 '(org-level-1 ((nil (:inherit outline-1))))
 '(org-level-2 ((t (:inherit outline-2))))
 '(org-level-3 ((t (:inherit outline-3))))
 '(org-level-4 ((t (:inherit outline-2))))
 '(org-level-5 ((t (:inherit outline-1))))
 '(org-level-6 ((t (:inherit outline-2))))
 '(org-table ((((class color) (min-colors 88) (background light)) (:foreground "lightyellow"))))
 '(outline-1 ((t (:inherit font-lock-function-name-face :foreground "purple"))))
 '(paren-face ((((class color)) (:foreground "gray40"))))
 '(semantic-complete-inline-analyzer-displayor-class (quote semantic-displayor-tooltip))
 '(semantic-complete-inline-analyzer-idle-displayor-class (quote semantic-displayor-tooltip))
 '(semantic-idle-scheduler-verbose-flag t)
 '(semantic-imenu-sort-bucket-function (quote semantic-sort-tags-by-name-increasing))
 '(semanticdb-global-mode t nil (semanticdb))
 '(show-paren-match ((((class color) (background dark)) (:background "gray15"))))
 '(show-paren-mode t)
 '(w3m-anchor-face ((((class color) (background light)) (:foreground "yellow"))))
 '(w3m-arrived-anchor-face ((((class color) (background light)) (:foreground "yellow3"))))
 '(w3m-header-line-location-content-face ((((class color) (background light)) (:box (:line-width 2 :color "grey75" :style released-button)))))
 '(w3m-header-line-location-title-face ((((class color) (background light)) (:box (:line-width 2 :color "grey75" :style released-button))))))

;; Common lisp
(require 'cl)

(defun assorted-customizations()
  (interactive)
  (require 'tramp)
  (setq tramp-default-method "scp")

  ;; 23.2 specific customizations:
  (setq font-use-system-font t)
  (setq tab-always-indent 'complete)

  ;; end 23.2 specific customizations:

  (setq semantic-load-turn-useful-things-on t)
  (partial-completion-mode)
  (setq-default indent-tabs-mode nil)
  (setq dired-use-ls-dired nil)
  (setq c-basic-offset 2)
  (defvar c-tab-always-indent nil)
  (setq-default case-fold-search nil)
  (defvar default-major-mode 'text-mode)
  (set-variable 'tab-width 2)

  ;; Enable some default-disabled commands
  (put 'narrow-to-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)

  (setq
   find-file-compare-truenames t
   minibuffer-confirm-incomplete t
   minibuffer-max-depth nil
   )

  ;; pending-delete-mode causes typed text to replace a selection, rather than append 
  (pending-delete-mode t)

  (setq dired-no-confirm '(byte-compile chgrp chmod chown compress copy delete hardlink load
                                        move print shell symlink uncompress recursive-delete kill-file-buffer
                                        kill-dired-buffer patch create-top-dir revert-subdirs))
  
  (setq backup-by-copying t 
        backup-directory-alist '(("." . "~/.emacs.d/autosaves/"))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  (defvar cperl-mode-hook)
  (defalias 'perl-mode 'cperl-mode)
  (setq cperl-mode-hook 'my-cperl-customizations)
  ;; reinstate the older space-completion for files
  (cond 
   ((boundp 'minibuffer-local-filename-completion-map)
    (define-key minibuffer-local-filename-completion-map [(?\ )] 'minibuffer-complete)))

  (setq remember-annotation-functions '(org-remember-annotation))
  (setq remember-handler-functions '(org-remember-handler))
  (add-hook 'remember-mode-hook 'org-remember-apply-template)
  )

(defun sudo-edit (&optional arg)
  (interactive "p")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))


; browse-url-firefox-arguments
; browse-url-new-window-flag
; browse-url-firefox-new-window-is-tab


(defun browse-url-chrome (url &rest args)
  (interactive (browse-url-interactive-arg "URL: "))
  (let ((browse-url-browser-function 'browse-url-generic)
        (browse-url-generic-program "google-chrome")
        (browse-url-generic-args '("--enable-user-stylesheet")))
    (apply #'browse-url url args)))

(setq browse-url-browser-function 'browse-url-chrome)


(defun browse-url-default-browser (url &rest args)
  (apply
   (cond
    ('browse-url-chrome)
    ;; ((executable-find browse-url-mozilla-program) 'browse-url-mozilla)
    (t
     (lambda (&rest ignore) (error "No usable browser found"))))
   url args))

(defun my-keys()
  (interactive)
  (mapc 'global-unset-key
        '([(control ?x) (control ?c)] ;; was save-buffers-kill-emacs
          [(control ?z)]
          [(control next)]
          [(meta ?/)]))

  (defun setkey (key-fn) 
    (global-set-key 
     (car key-fn) 
     (cadr key-fn)))
  (mapc 'setkey
        '(
          ([(control ?c) (control ?m) ] execute-extended-command)
          ([(control ?c) (?m)         ] execute-extended-command)
          ([(control ?x) (control ?m) ] execute-extended-command)
          ([(control ?x) (m)          ] execute-extended-command)
          ([(control ?c) (control ?k) ] kill-region)
          ([(meta ?w)                 ] kill-ring-save)
          ([(control ?y)              ] yank)
          ([(control ?w)              ] backward-kill-word)
          ([(control ?x) (control ?k) ] kill-region)
          ([(control ?!)              ] delete-window)
          ([(control ?1)              ] delete-other-windows)
          ([(control ?2)              ] split-window-horizontally)
          ([(control ?3)              ] split-window-vertically)
          ([(control ?4)              ] ediff-buffers)
          ([(control ?7)              ] ido-switch-buffer)
          ([(control ?8)              ] ibuffer)
          ([(control ?9)              ] bs-cycle-previous)
          ([(control ?0)              ] bs-cycle-next)
          ([(control ?\))             ] (lambda() (interactive) (other-window 1)))
          ([(control ?\()             ] (lambda() (interactive) (other-window -1)))
          ([(control meta ?0)         ] winner-redo)
          ([(control meta ?9)         ] winner-undo)
          ;; ([(tab)                     ] my-indent-function)
          ;; ([(control ?i)              ] my-indent-function)
          ([(control kp-subtract)     ] delete-window)
          ([(meta ?\\)                ] kill-current-buffer)
          ([(meta ?/)                 ] hippie-expand)
          ([(shift kp-subtract)       ] kill-current-buffer-and-window)
          ([(shift right)             ] picture-forward-column)
          ([(shift ?\ )               ] just-one-space)
          ([(meta ?\ )                ] yas/expand)
          ([f5                        ] mode-compile)   	  
          ([f6                        ] filesets-open)
          ([(meta f6)                 ] filesets-close)
          ([(control XF86Forward)     ] find-grep-dired)
          ([f12                       ] revert-buffer-and-refind-position)
          ))
  )

;; I either want to load up a heavyweight emacs if I am on my local machine
;;   and my slag heap o' elisp is available, or, if I am launching from 
;;   a remote machine via terminal, I just want a useful subset
(defconst *sendak-emacs-support* (expand-file-name "/usr/sen/tmp1/saunders/adams-worldview/managed-repos/emacs-supports/current/"))
(defconst *home-emacs-support* (expand-file-name "~/emacs/"))
(defconst *emacs-root*
      (cond
       ((file-directory-p *sendak-emacs-support*) *sendak-emacs-support*)
			 ((file-directory-p *home-emacs-support*) *home-emacs-support*)
			 (t nil)))

(defconst *full-elisp-available* (not (null *emacs-root*)))

(defun setup-paths () 
  (interactive)
  (cond 
   (*full-elisp-available*
    (labels ((add-path (p)
		       (add-to-list 'load-path
				    (concat *emacs-root* p))))
      ;; my stuff
      (add-path "lisp")	   
      ;; other people's stuff
      (add-path "site-lisp") 
      ;; auto install stuff
      (add-path "auto-install-lisp")  

      (add-path "site-lisp/cc-mode") 
      (add-path "site-lisp/coffee-mode")  
      (add-path "site-lisp/color-theme")
      (add-path "site-lisp/ecb")  
      (add-path "site-lisp/elib")  
      (add-path "site-lisp/ensime/elisp")
      (add-path "site-lisp/filesets")
      (add-path "site-lisp/haskell-mode")
      (add-path "site-lisp/icicles")  
      (add-path "site-lisp/js2-mode")
      (add-path "site-lisp/nxml-mode")  
      (add-path "site-lisp/org-mode/contrib/lisp")  
      (add-path "site-lisp/org-mode/lisp")  
      (add-path "site-lisp/python-mode")  
      (add-path "site-lisp/remember")  
      (add-path "site-lisp/scala-mode")  
      (add-path "site-lisp/slime")  
      (add-path "site-lisp/yasnippet")  
      ))
   (t nil)))

(setup-paths)

(defun common-setup()
  (interactive)
  (global-font-lock-mode t)
  (when (fboundp 'winner-mode)
    (winner-mode 1))

  (cond
   (*full-elisp-available*
		(progn
			(require 'smooth-scrolling)
			(require 'parenface)
			(require 'dired-aux)
			(require 'dired-x)
			(require 'dired+)
			(require 'dired-details)
			(require 'dired-details+)
			(require 'filecache)
			(require 'ido)
			(require 'pabbrev)
			(require 'picture)
			(require 'smooth-scrolling)
			(require 'yaml-mode)
      (require 'icicles)
      (require 'bookmark+)
      (require 'htmlize)
      (require 'coffee-mode)
      (require 'js2-mode)
      (require 'auto-install)
      (require 'undo-tree)
      (require 'markdown-mode)

      ;; (defcustom dired-details-hide-link-targets t
      ;; (defcustom dired-details-initially-hide t
      
      (global-undo-tree-mode)

			;; general elisp
			(load-library "my-emisc")

			;; (ido-mode nil)
			(icy-mode nil)
			(filesets-setup)

			(scala-mode-setup)
			(haskell-setup)
			;; (load-file "my-lisp-config")
			;; minor modes first
			(load-library "my-yas")
			(load-library "my-org-mode")
			(load-library "my-python-config")
			(autoload 'nxml-mode "nxml-mode" "Edit XML documents" t)))
   (t nil))
  (add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
  (add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))
  (add-to-list 'auto-mode-alist '("\\.gp$" . gnuplot-mode))
  (add-to-list 'auto-mode-alist '("\\.\\(xml\\|xsl\\|mxml\\|rng\\|xhtml\\)\\'" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))
  (add-to-list 'auto-mode-alist '("\\.md" . markdown-mode))

  (cond ((eq window-system nil) 
				 ;; Running in a terminal =============
				 (custom-set-faces
					'(mode-line ((t (:background "blue" :foreground "white" :weight bold))))
					'(mode-line-inactive ((default (:inherit mode-line)) (nil (:background "lightblue" :foreground "white"))))
					))
				(t
				 (set-mouse-color "black")
				 (require 'server)
				 (cond ((not (server-running-p))
								(server-start))
							 (t "server already running")))))

;; Assorted mode setups, utility defs
(defun filesets-setup()
  (load-library "filesets+")
  (filesets-init)
  (load-library "filesets-defs")
  )

;; MINI HOWTO: open .scala file. Ensure bin/server.sh is executable. M-x ensime

(defun scala-mode-setup()
  (interactive)
  (require 'ensime)
  (require 'scala-mode-auto)
  (require 'scala-mode)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
  (defvar ensime-scaladoc-stdlib-url-base "http://www.scala-lang.org/api/current")
  (defvar ensime-scaladoc-compiler-url-base "http://www.scala-lang.org/api/current")

  (add-hook 'scala-mode-hook
            '(lambda ()
               (load-library "my-scala-config")
               (yas/minor-mode-on))))

(defun haskell-setup()
  (interactive)
  (load "haskell-site-file")
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-ghci)
  ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)
  )

(defun gnuplot-mode-setup()
  (interactive)
  (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
  (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)
  (global-set-key [(f9)] 'gnuplot-make-buffer)
  )
       	       	       	       	       	       	    
(defun flip-to-last-buffer (&optional n)
  (interactive "p")
  (switch-to-buffer (car (cdr (buffer-list)))))

(defun revert-buffer-and-refind-position()
	(interactive)
	(let ((p (point-marker)))
		(revert-buffer t t t)
		(goto-char p)))

(defun my-indent-function ()
  (interactive)
  (cond ((not mark-active)
		 (indent-according-to-mode))
		(t
		 (indent-region (point-marker) (mark-marker)))))

(defun find-kbd-macro-file ()
  (interactive)
  (set-buffer (find-file (concat *emacs-root* "kbd-macros.el"))))

(defun coffee-custom ()
  ;; CoffeeScript uses two spaces.
  (make-local-variable 'tab-width)
  (set 'tab-width 2)

  ;; If you don't want your compiled files to be wrapped
  ;; (setq coffee-args-compile '("-c" "--bare"))

  ;; *Messages* spam
  (setq coffee-debug-mode t)

  ;; Emacs key binding
  (define-key coffee-mode-map [(meta r)] 'coffee-compile-buffer)

  ;; Compile '.coffee' files on every save
  (and (file-exists-p (buffer-file-name))
       (file-exists-p (coffee-compiled-file-name))
       (coffee-cos-mode t)))

(add-hook 'coffee-mode-hook
  '(lambda() (coffee-custom)))

(assorted-customizations)
(common-setup)
(my-keys)

(defun ensime-rpc-symbol-at-point-i ()
  (interactive)
  (ensime-rpc-symbol-at-point))

(eval-when-compile
  (require 'color-theme))
(require 'color-theme)

(defun color-theme-printable-bw ()
  (interactive)
  (color-theme-install
   '(color-theme-inkpot
     ((foreground-color . "#000000")
      (background-color . "#FFFFFF")
      (border-color . "#3e3e5e")
      (cursor-color . "#404040")
      (background-mode . dark))
     (font-lock-builtin-face ((t (:foreground "#000000"))))
     (font-lock-comment-face ((t (:stipple t :italic t :foreground "#000000")))) 
     (font-lock-delimiter-face ((t (:italic t :foreground "#000000")))) 
     (font-lock-constant-face ((t (:foreground "#000000"))))
     (font-lock-doc-face ((t (:italic t :foreground "#000000"))))
     (font-lock-function-name-face ((t (:bold t :foreground "#000000"))))
     (font-lock-keyword-face ((t (:bold t :foreground "#000000"))))
     (font-lock-preprocessor-face ((t (:foreground "#000000"))))
     (font-lock-reference-face ((t (:bold t :foreground "#000000"))))
     (font-lock-string-face ((t (:foreground "#000000"))))
     (font-lock-type-face ((t (:roman t :foreground "#000000"))))
     (font-lock-variable-name-face ((t (:foreground "#000000"))))
     (font-lock-warning-face ((t (:foreground "#000000")))))))



(defun color-theme-adam-chandra ()
  "Color theme by Adam Saunders, originally ripped off from somebody named Arneson"
  (interactive)
  (color-theme-install
   '(color-theme-adam-chandra
     ((background-color . "black")
      (background-mode . light)
      (background-toolbar-color . "#cf3ccf3ccf3c")
      (border-color . "#000000000000")
      (bottom-toolbar-shadow-color . "#79e77df779e7")
      (cursor-color . "Red")
      (foreground-color . "Beige")
      (top-toolbar-shadow-color . "#fffffbeeffff"))
     ((buffers-tab-face . buffers-tab)
      (cperl-here-face . font-lock-string-face)
      (cperl-invalid-face quote default)
      (cperl-pod-face . font-lock-comment-face)
      (cperl-pod-head-face . font-lock-variable-name-face)
      (ispell-highlight-face . highlight)
      (vc-mode-face . highlight)
      (vm-highlight-url-face . bold-italic)
      (vm-highlighted-header-face . bold)
      (vm-mime-button-face . gui-button-face)
      (vm-summary-highlight-face . bold))
     (default ((t (nil))))
     (bbdb-company ((t (nil))))
     (bbdb-field-name ((t (:bold t))))
     (bbdb-field-value ((t (nil))))
     (bbdb-name ((t (:underline t))))
     (blue ((t (:foreground "SteelBlue1"))))
     (bold ((t (:bold t))))
     (bold-italic ((t (:bold t :foreground "yellow"))))
     (border-glyph ((t (nil))))
     (buffers-tab ((t (:background "black" :foreground "LightSkyBlue"))))
     (cperl-array-face ((t (:bold t :foreground "SkyBlue2"))))
     (cperl-hash-face ((t (:foreground "LightBlue2"))))
     (cperl-invalid-face ((t (:foreground "white"))))
     (cperl-nonoverridable-face ((t (:foreground "chartreuse3"))))
     (custom-button-face ((t (:bold t))))
     (custom-changed-face ((t (:background "SteelBlue1" :foreground "white"))))
     (custom-comment-face ((t (:foreground "white"))))
     (custom-comment-tag-face ((t (:foreground "white"))))
     (custom-documentation-face ((t (nil))))
     (custom-face-tag-face ((t (:underline t))))
     (custom-group-tag-face ((t (:underline t :foreground "SteelBlue1"))))
     (custom-group-tag-face-1 ((t (:underline t :foreground "red"))))
     (custom-invalid-face ((t (:background "red" :foreground "yellow"))))
     (custom-modified-face ((t (:background "SteelBlue1" :foreground "white"))))
     (custom-rogue-face ((t (:background "black" :foreground "pink"))))
     (custom-saved-face ((t (:underline t))))
     (custom-set-face ((t (:background "white" :foreground "SteelBlue1"))))
     (custom-state-face ((t (:foreground "white"))))
     (custom-variable-button-face ((t (:underline t :bold t))))
     (custom-variable-tag-face ((t (:underline t :foreground "SteelBlue1"))))
     (cvs-filename-face ((t (:foreground "white"))))
     (cvs-handled-face ((t (:foreground "pink"))))
     (cvs-header-face ((t (:foreground "green"))))
     (cvs-marked-face ((t (:bold t :foreground "green3"))))
     (cvs-msg-face ((t (:foreground "red"))))
     (cvs-need-action-face ((t (:foreground "yellow"))))
     (cvs-unknown-face ((t (:foreground "grey"))))
     (diff-added-face ((t (nil))))
     (diff-changed-face ((t (nil))))
     (diff-file-header-face ((t (:bold t :background "grey70"))))
     (diff-hunk-header-face ((t (:background "grey85"))))
     (diff-index-face ((t (:bold t :background "grey70"))))
     (diff-removed-face ((t (nil))))
     (dired-face-boring ((t (:foreground "Gray65"))))
     (dired-face-directory ((t (:bold t :foreground "SkyBlue2"))))
     (dired-face-executable ((t (:foreground "Green"))))
     (dired-face-flagged ((t (:background "LightSlateGray"))))
     (dired-face-header ((t (:background "grey75" :foreground "black"))))
     (dired-face-marked ((t (:background "PaleVioletRed"))))
     (dired-face-permissions ((t (:background "grey75" :foreground "black"))))
     (dired-face-setuid ((t (:foreground "Red"))))
     (dired-face-socket ((t (:foreground "magenta"))))
     (dired-face-symlink ((t (:foreground "cyan"))))
     (excerpt ((t (nil))))
     (fixed ((t (:bold t))))
     (font-lock-builtin-face ((t (:foreground "red3"))))
     (font-lock-comment-face ((t (:foreground "LightGray"))))
     (font-lock-constant-face ((t (nil))))
     (font-lock-doc-string-face ((t (:foreground "turquoise"))))
     (font-lock-function-name-face ((t (:foreground "white"))))
     (font-lock-keyword-face ((t (:foreground "green"))))
     (font-lock-preprocessor-face ((t (:foreground "green3"))))
     (font-lock-reference-face ((t (:foreground "red3"))))
     (font-lock-string-face ((t (:foreground "turquoise"))))
     (font-lock-type-face ((t (:foreground "steelblue"))))
     (font-lock-variable-name-face ((t (:foreground "magenta2"))))
     (font-lock-warning-face ((t (:bold t :foreground "Red"))))
     (green ((t (:foreground "green"))))
     (gui-button-face ((t (:background "grey75" :foreground "black"))))
     (gui-element ((t (nil))))
     (highlight ((t (:background "darkseagreen2" :foreground "SteelBlue1"))))
     (html-helper-bold-face ((t (:bold t))))
     (html-helper-italic-face ((t (:bold t :foreground "yellow"))))
     (html-helper-underline-face ((t (:underline t))))
     (hyper-apropos-documentation ((t (:foreground "white"))))
     (hyper-apropos-heading ((t (:bold t))))
     (hyper-apropos-hyperlink ((t (:foreground "sky blue"))))
     (hyper-apropos-major-heading ((t (:bold t))))
     (hyper-apropos-section-heading ((t (:bold t))))
     (hyper-apropos-warning ((t (:bold t :foreground "red"))))
     (info-node ((t (:bold t :foreground "yellow"))))
     (info-xref ((t (:bold t))))
     (isearch ((t (:background "paleturquoise" :foreground "dark red"))))
     (isearch-secondary ((t (:foreground "red3"))))
     (italic ((t (:bold t :foreground "yellow"))))
     (left-margin ((t (nil))))
     (list-mode-item-selected ((t (:background "gray68" :foreground "dark green"))))
     (man-bold ((t (:bold t))))
     (man-heading ((t (:bold t))))
     (man-italic ((t (:foreground "yellow"))))
     (man-xref ((t (:underline t))))
     (message-cited-text ((t (:foreground "orange"))))
     (message-header-contents ((t (:foreground "white"))))
     (message-headers ((t (:bold t :foreground "orange"))))
     (message-highlighted-header-contents ((t (:bold t))))
     (message-url ((t (:bold t :foreground "pink"))))
     (mmm-face ((t (:background "black" :foreground "green"))))
     ; (modeline ((t (:background "LightYellow" :foreground "DarkBlue" :bold t))))
     ; (modeline-buffer-id ((t (:background "Gray80" :foreground "SteelBlue4"))))
     ; (modeline-mousable ((t (:background "Gray80" :foreground "firebrick"))))
     ; (modeline-mousable-minor-mode ((t (:background "Gray80" :foreground "green4"))))
     (paren-blink-off ((t (:foreground "gray80"))))
     (paren-match ((t (:background "dark blue"))))
     (paren-mismatch ((t (:background "DeepPink" :foreground "LightSkyBlue"))))
     (pointer ((t (nil))))
     (primary-selection ((t (:background "gray65" :foreground "DarkBlue"))))
     (red ((t (:foreground "red"))))
     (region ((t (:background "gray65" :foreground "DarkBlue"))))
     (right-margin ((t (nil))))
     (secondary-selection ((t (:background "paleturquoise" :foreground "black"))))
     (shell-option-face ((t (:foreground "SteelBlue4"))))
     (shell-output-2-face ((t (:foreground "green4"))))
     (shell-output-3-face ((t (:foreground "green4"))))
     (shell-output-face ((t (:bold t))))
     (shell-prompt-face ((t (:foreground "red4"))))
     (text-cursor ((t (:background "Red3" :foreground "black"))))
     (toolbar ((t (:background "Gray80" :foreground "black"))))
     (underline ((t (:underline t))))
     (vertical-divider ((t (nil))))
     (vm-xface ((t (:background "white" :foreground "black"))))
     (vmpc-pre-sig-face ((t (:foreground "forestgreen"))))
     (vmpc-sig-face ((t (:foreground "steelblue"))))
     (widget ((t (nil))))
     (widget-button-face ((t (:bold t))))
     (widget-button-pressed-face ((t (:foreground "red"))))
     (widget-documentation-face ((t (:foreground "dark green"))))
     (widget-field-face ((t (:background "gray85" :foreground "black"))))
     (widget-inactive-face ((t (:foreground "dim gray"))))
     (x-face ((t (:background "white" :foreground "black"))))
     (xrdb-option-name-face ((t (:foreground "red"))))
     (yellow ((t (:foreground "yellow"))))
     (nxml-name-face ((t (:foreground "LightBlue"))))
     (nxml-text-face ((t (:foreground "Heather"))))
       (nxml-comment-content-face ((t (:foreground "Gray80"))))
     (nxml-delimited-data-face ((t (:foreground "Heather"))))
     (zmacs-region ((t (:background "gray65")))))))

(defun color-theme-printable-bw ()
  (interactive)

  (color-theme-install
   '(color-theme-adam-chandra
     ((background-color . "white")
      (background-mode . light)
      (background-toolbar-color . "#cf3ccf3ccf3c")
      (border-color . "#000000000000")
      (bottom-toolbar-shadow-color . "#79e77df779e7")
      (cursor-color . "Red")
      (foreground-color . "Black")
      (top-toolbar-shadow-color . "#fffffbeeffff"))
     ((buffers-tab-face . buffers-tab)
      (cperl-here-face . font-lock-string-face)
      (cperl-invalid-face quote default)
      (cperl-pod-face . font-lock-comment-face)
      (cperl-pod-head-face . font-lock-variable-name-face)
      (ispell-highlight-face . highlight)
      (vc-mode-face . highlight)
      (vm-highlight-url-face . bold-italic)
      (vm-highlighted-header-face . bold)
      (vm-mime-button-face . gui-button-face)
      (vm-summary-highlight-face . bold))

     (default ((t (:stipple nil 
                            :background "White" 
                            :foreground "Black" 
                            :inverse-video nil 
                            :box nil 
                            :strike-through nil 
                            :overline nil 
                            :underline nil 
                            :slant normal 
                            :weight normal 
                            :height 90
                            :width normal 
                            :foundry "unknown" 
                            ;; :family "DejaVu Sans Mono"
                  ))))
     (bbdb-company ((t (nil))))
     (bbdb-field-name ((t (:bold t))))
     (bbdb-field-value ((t (nil))))
     (bbdb-name ((t (:underline t))))
     (blue ((t (:foreground "SteelBlue1"))))
     (bold ((t (:bold t))))
     (bold-italic ((t (:bold t :foreground "yellow"))))
     (border-glyph ((t (nil))))
     (buffers-tab ((t (:background "black" :foreground "LightSkyBlue"))))
     (cperl-array-face ((t (:bold t :foreground "SkyBlue2"))))
     (cperl-hash-face ((t (:foreground "LightBlue2"))))
     (cperl-invalid-face ((t (:foreground "white"))))
     (cperl-nonoverridable-face ((t (:foreground "chartreuse3"))))
     (custom-button-face ((t (:bold t))))
     (custom-changed-face ((t (:background "SteelBlue1" :foreground "white"))))
     (custom-comment-face ((t (:foreground "white"))))
     (custom-comment-tag-face ((t (:foreground "white"))))
     (custom-documentation-face ((t (nil))))
     (custom-face-tag-face ((t (:underline t))))
     (custom-group-tag-face ((t (:underline t :foreground "SteelBlue1"))))
     (custom-group-tag-face-1 ((t (:underline t :foreground "red"))))
     (custom-invalid-face ((t (:background "red" :foreground "yellow"))))
     (custom-modified-face ((t (:background "SteelBlue1" :foreground "white"))))
     (custom-rogue-face ((t (:background "black" :foreground "pink"))))
     (custom-saved-face ((t (:underline t))))
     (custom-set-face ((t (:background "white" :foreground "SteelBlue1"))))
     (custom-state-face ((t (:foreground "white"))))
     (custom-variable-button-face ((t (:underline t :bold t))))
     (custom-variable-tag-face ((t (:underline t :foreground "SteelBlue1"))))
     (cvs-filename-face ((t (:foreground "white"))))
     (cvs-handled-face ((t (:foreground "pink"))))
     (cvs-header-face ((t (:foreground "green"))))
     (cvs-marked-face ((t (:bold t :foreground "green3"))))
     (cvs-msg-face ((t (:foreground "red"))))
     (cvs-need-action-face ((t (:foreground "yellow"))))
     (cvs-unknown-face ((t (:foreground "grey"))))
     (diff-added-face ((t (nil))))
     (diff-changed-face ((t (nil))))
     (diff-file-header-face ((t (:bold t :background "grey70"))))
     (diff-hunk-header-face ((t (:background "grey85"))))
     (diff-index-face ((t (:bold t :background "grey70"))))
     (diff-removed-face ((t (nil))))
     (dired-face-boring ((t (:foreground "Gray65"))))
     (dired-face-directory ((t (:bold t :foreground "SkyBlue2"))))
     (dired-face-executable ((t (:foreground "Green"))))
     (dired-face-flagged ((t (:background "LightSlateGray"))))
     (dired-face-header ((t (:background "grey75" :foreground "black"))))
     (dired-face-marked ((t (:background "PaleVioletRed"))))
     (dired-face-permissions ((t (:background "grey75" :foreground "black"))))
     (dired-face-setuid ((t (:foreground "Red"))))
     (dired-face-socket ((t (:foreground "magenta"))))
     (dired-face-symlink ((t (:foreground "cyan"))))
     (excerpt ((t (nil))))
     (fixed ((t (:bold t))))

     (font-lock-constant-face						((t (:foreground "black" :bold t  	              ))))
     (font-lock-warning-face						((t (:foreground "black"                          ))))
     (font-lock-builtin-face						((t (:foreground "black" :bold t		              ))))
     (font-lock-comment-face						((t (:foreground "black"            :italic t  		))))
     (font-lock-comment-delimiter-face  ((t (:foreground "black"            :italic t  		))))
     (font-lock-doc-string-face					((t (:foreground "black"            :italic t 		))))
     (font-lock-doc-face		      			((t (:foreground "black"           	:italic t 		))))
     (font-lock-delimiter-face          ((t (:foreground "black"            :italic t 		))))
     (font-lock-function-name-face			((t (:foreground "black" :bold t  	              ))))
     (font-lock-keyword-face						((t (:foreground "black" :bold t  	              ))))
     (font-lock-preprocessor-face				((t (:foreground "black"                          ))))
     (font-lock-reference-face					((t (:foreground "black"                          ))))
     (font-lock-string-face							((t (:foreground "black"                          ))))
     (font-lock-type-face								((t (:foreground "black" :bold t  	              ))))
     (font-lock-variable-name-face			((t (:foreground "black" :bold t  	              ))))

     (green ((t (:foreground "green"))))
     (gui-button-face ((t (:background "grey75" :foreground "black"))))
     (gui-element ((t (nil))))
     (highlight ((t (:background "darkseagreen2" :foreground "SteelBlue1"))))
     (html-helper-bold-face ((t (:bold t))))
     (html-helper-italic-face ((t (:bold t :foreground "yellow"))))
     (html-helper-underline-face ((t (:underline t))))
     (hyper-apropos-documentation ((t (:foreground "white"))))
     (hyper-apropos-heading ((t (:bold t))))
     (hyper-apropos-hyperlink ((t (:foreground "sky blue"))))
     (hyper-apropos-major-heading ((t (:bold t))))
     (hyper-apropos-section-heading ((t (:bold t))))
     (hyper-apropos-warning ((t (:bold t :foreground "red"))))
     (info-node ((t (:bold t :foreground "yellow"))))
     (info-xref ((t (:bold t))))
     (isearch ((t (:background "paleturquoise" :foreground "dark red"))))
     (isearch-secondary ((t (:foreground "red3"))))
     (italic ((t (:bold t :foreground "yellow"))))
     (left-margin ((t (nil))))
     (list-mode-item-selected ((t (:background "gray68" :foreground "dark green"))))
     (man-bold ((t (:bold t))))
     (man-heading ((t (:bold t))))
     (man-italic ((t (:foreground "yellow"))))
     (man-xref ((t (:underline t))))
     (message-cited-text ((t (:foreground "orange"))))
     (message-header-contents ((t (:foreground "white"))))
     (message-headers ((t (:bold t :foreground "orange"))))
     (message-highlighted-header-contents ((t (:bold t))))
     (message-url ((t (:bold t :foreground "pink"))))
     (mmm-face ((t (:background "black" :foreground "green"))))
     ; (modeline ((t (:background "LightYellow" :foreground "DarkBlue" :bold t))))
     ; (modeline-buffer-id ((t (:background "Gray80" :foreground "SteelBlue4"))))
     ; (modeline-mousable ((t (:background "Gray80" :foreground "firebrick"))))
     ; (modeline-mousable-minor-mode ((t (:background "Gray80" :foreground "green4"))))
     (paren-blink-off ((t (:foreground "gray80"))))
     (paren-match ((t (:background "dark blue"))))
     (paren-mismatch ((t (:background "DeepPink" :foreground "LightSkyBlue"))))
     (pointer ((t (nil))))
     (primary-selection ((t (:background "gray65" :foreground "DarkBlue"))))
     (red ((t (:foreground "red"))))
     (region ((t (:background "gray65" :foreground "DarkBlue"))))
     (right-margin ((t (nil))))
     (secondary-selection ((t (:background "paleturquoise" :foreground "black"))))
     (shell-option-face ((t (:foreground "SteelBlue4"))))
     (shell-output-2-face ((t (:foreground "green4"))))
     (shell-output-3-face ((t (:foreground "green4"))))
     (shell-output-face ((t (:bold t))))
     (shell-prompt-face ((t (:foreground "red4"))))
     (text-cursor ((t (:background "Red3" :foreground "black"))))
     (toolbar ((t (:background "Gray80" :foreground "black"))))
     (underline ((t (:underline t))))
     (vertical-divider ((t (nil))))
     (vm-xface ((t (:background "white" :foreground "black"))))
     (vmpc-pre-sig-face ((t (:foreground "forestgreen"))))
     (vmpc-sig-face ((t (:foreground "steelblue"))))
     (widget ((t (nil))))
     (widget-button-face ((t (:bold t))))
     (widget-button-pressed-face ((t (:foreground "red"))))
     (widget-documentation-face ((t (:foreground "dark green"))))
     (widget-field-face ((t (:background "gray85" :foreground "black"))))
     (widget-inactive-face ((t (:foreground "dim gray"))))
     (x-face ((t (:background "white" :foreground "black"))))
     (xrdb-option-name-face ((t (:foreground "red"))))
     (yellow ((t (:foreground "yellow"))))
     (nxml-name-face ((t (:foreground "LightBlue"))))
     (nxml-text-face ((t (:foreground "Heather"))))
       (nxml-comment-content-face ((t (:foreground "Gray80"))))
     (nxml-delimited-data-face ((t (:foreground "Heather"))))
     (zmacs-region ((t (:background "gray65")))))))

(defun dired-expand-all-subdirs ()
  (interactive)
  (while 
      (dired-next-dirline 1)
    (point-to-register ?q)
    (dired-maybe-insert-subdir (diredp-this-subdir)) ;; (* DIRNAME &optional SWITCHES NO-ERROR-IF-NOT-DIR-P)
    (register-to-point ?q t) ;; (* reg delete)
    ))



(defun ask-before-killing-buffer ()
  (interactive)
  (defun ask-before-kill-buffer (buffer)
    (not (and (equalp (current-buffer) buffer)
              (not (y-or-n-p 
                    "This buffer is protected. Really kill? ")))))
  (let 
      ((fn (apply-partially 'ask-before-kill-buffer (current-buffer))))
    (add-to-list 'kill-buffer-query-functions fn)))

;; (add-to-list 'kill-buffer-hook 'ask-before-kill-buffer)
;; (set 'kill-buffer-query-functions '(server-kill-buffer-query-function process-kill-buffer-query-function))

