#! /usr/bin/perl -w
use strict;

use FindBin qw($Bin);
use Getopt::Long;

#======================= [ Forward Decls ] =======================
sub splitFilename($);


#======================= [ syntax ] =======================
sub syntax () {
  print "Syntax: split-filename /some/path/to/file.ext\n";
}

#======================= [ Command line processing: ] =======================
my %options=();
GetOptions(
           "file=s"       => \$options{file},
           "root=s"       => \$options{root},
           "quiet|q"      => \$options{quiet},
          );


{
  #======================= [ Main: ] =======================
  {
    defined $options{file} or syntax() and exit;
    $options{root} = "." unless defined $options{root};

    my $file = $options{file};
    my $filetype;

    ($file, $filetype) = getUncompressedFiletype($options{root}, $file);

    if ( !($filetype =~ /(postscript|pdf)/) ) {
      ## yuck - try to fix ps/pdfs with (illegal but common) leading blank lines
      removeLeadingBlankLines( $file );
      ($file, $filetype) = getUncompressedFiletype($options{root}, $file);
    }

    my %fileParts = splitFilename( $file ); 
    my $extension = mimeTypeToExtension( $filetype );
    $extension = "unknown" unless defined( $extension );
    my $newFilename = "$fileParts{'dir'}/$fileParts{'noext'}.$extension";
    if ( "$file" ne "$newFilename" ) {
      if ( -f "$newFilename" ) {
        $options{quiet} or print "deleting duplicate file $file\n";
        unlink($file) or die "unlink error: $!\n";
      } else {
        $options{quiet} or print "$file -> $newFilename\n";
        rename($file, "$newFilename") or die "rename error $file -> $newFilename: $!\n";
      }
    } else {
      $options{quiet} or print "ok: $file\n";
    }
  }



  #======================= [ splitFilename ] =======================
  sub splitFilename($) {
    my ($path) =  @_;
    my $name;
    my $dir =  $path;
    if ( $path =~ m!/! ) {
      $dir =~ s!/[^/]+$!!;
      ## print "p = $path, d = $dir\n";

      $name = substr( $path, length( $dir )+1 );
    } else {
      $name = $dir;
      $dir = undef;
    }

    my ($noext, $exts) = split /\./, $name, 2;

    # print "name = $name\n" if defined $name;
    # print "exts = $exts\n" if defined $exts;
    # print "dir = $dir\n" if defined $dir;
    # print "noext = $noext\n" if defined $noext;

    my %parts = (
                 "name" => $name,
                 "dir" => $dir,
                 "noext" => $noext, 
                 "exts" => $exts, 
                );
    return %parts;
  }
}
