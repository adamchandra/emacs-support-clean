#!/bin/sh
exec scala -savecompiled $0 $@
!#

// split -a 5 -d -l "$batchSize" $infile --filter='cat > $FILE; ../bin/dir-munge.sh $FILE | xargs -i mkdir -p {}; mv $FILE $(../bin/dir-munge.sh $FILE)' 0

import scala.io.Source
import java.io.{File=>JFile}

for {
  line <- Source.stdin.getLines
} {

  // Turn this: 
  //   pdfs/www.cs.uvm.edu/~eppstein/personal/Gecco06EMT.pdf is a paper Mon Nov 19 21:40:28 2012
  // Into this:
  //   pdfs/www.cs.uvm.edu/~eppstein/personal/Gecco06EMT.pdf.d/pstotext/Gecco06EMT.pdf.pstotext.xml -> pdfs/www.cs.uvm.edu/~eppstein/personal/Gecco06EMT.pdf.d/pstotext/Gecco06EMT.pdf.meta.xml

  val re = "\\s*(.*)\\s+(is a paper)(.*)".r
  // println(line)
  try {
    val re(file, isPaper, date) = line
    // println("  "+file)
    // println("  "+isPaper)
    // println("  "+date)
    val path = new JFile(file)
    val name = path.getName
    // println("name = " + path.getName)
    // println("parent = " + path.getParent)
    // println("path = " + path.getPath)
    val artifactDir = new JFile(path.getParent, name+".d")
    // println("artifact.d = " + artifactDir)
    val pstotextArtifactDir = new JFile(artifactDir, "pstotext")
    // println("artifact.d/pstotext = " + pstotextArtifactDir)
    val pstotextLog = new JFile(pstotextArtifactDir, name+".pstotext.log")
    val pstotextXml = new JFile(pstotextArtifactDir, name+".pstotext.xml")
    val metataggerXml = new JFile(pstotextArtifactDir, name+".meta.xml")
    // println("   " + pstotextLog)
    // println("   " + pstotextXml)
    // println("   " + metataggerXml)
    println(pstotextXml + " -> " + metataggerXml)
  } catch {
    case m:MatchError => 
      // println("  (no match)")
  }
  
  
}
