package controllers

import lib._

import play.api.mvc._
import net.openreview.model._
import com.weiglewilczek.slf4s.Logging
import pov.{EventPoV, EventPoVFilter, EventPoVStore}
import model.event.{EventPoVComponent}

import ScalateOps._
import model.{EventFilterSidebar, ReceivedEventFilterSidebarBlock}

object AdminController extends ControllerOps {

  
  def normalize = Action {
    TemporaryRedirect("/dashboard")
  }

  lazy val received = ReceivedEventFilterSidebarBlock.f.requiresResponse
  def index() = filtered(received)

  
  def filtered(eventFilter: EventPoVFilter) = OptUserAction {
    implicit request => implicit user => {
      val viewpoint = ViewpointCache(user)
      val store = viewpoint.events
      
      val includeActions = (!store.viewpoint.isWorldOnlyViewpoint)

      Ok(scalate("dashboard")(
        'request -> request,
        'user -> user,
        'eventFilterSidebar -> EventFilterSidebar.theSidebar(includeActions),
        //'dateformat -> DateTimeFormat.forPattern("yyyy-M-dd h:mm a"), //ISODateTimeFormat.dateHourMinute(),
        'events -> {
          val visible = eventFilter(store)
          logger.debug("Found " + visible.size + " visible events")
          //val leaves : Iterable[Event] = active.flatMap(_.leaves)
          //logger.debug("Found " + leaves.size + " active events")
          //leaves
          visible map {
            EventPoVComponent(_)
          }
        },
        'activeFilter -> EventFilterSidebar.toId(eventFilter),
        'store -> store
      ))
    }
  }

  def eventfiltersidebar = OptUserAction {
    implicit request => implicit user => {
      val viewpoint = ViewpointCache(user)
      val store = viewpoint.events
      val includeActions = (!store.viewpoint.isWorldOnlyViewpoint)
      Ok(viewJson(EventFilterSidebar.theSidebar(includeActions), "index")('store -> store))
    }
  }

}

