/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cc.rexa2.camel.routes

import _root_.org.apache
import apache.camel.scala.dsl._

import apache.camel.processor.aggregate.UseLatestAggregationStrategy;
import apache.camel.scala.dsl.builder.RouteBuilder

import _root_.org.junit.Test
import cc.rexa2.camel.commons.CamelOps._
import cc.rexa2.camel.test._

import scalaz._, scalaz.{Scalaz => Z}, Z.{node => _, _}

import edu.umass.cs.iesl.scalacommons.util.StringOps._

class RexaRoutesTest extends ScalaTestSupport {
  // for some reason these implicits aren't picked up by the presentation compiler
  //  putting them here makes ensime/sbt happy
  implicit def stringToUrix = stringToUri _
  implicit def mockWrapperx = mockWrapper _
  
  val builder = new RouteBuilder {}  
  
  // @Test def write_sge_shell_script {
  //   Routing.pstotextSgeRoute.addRoutesToCamelContext(context)
  //   
  //   test {
  //     "direct:create.script.pstotext" ! ("a b c d".wsvl)
  //   }
  // }

}



//   val count = 100
//   
//   @Test def simple_aggregator {
//     "mock:a" expect { _.received("message " + count) } 
//     test {
//       for (i <- 1 to count) {
//         "direct:a" ! ("message " + i)
//       }
//     }
//   }
// 
//   @Test def block_aggregator {
//     "mock:b" expect { _.received("message " + count) } 
//     test {
//       for (i <- 1 to count) {
//         "direct:b" ! ("message " + i)
//       }
//     }
//   }
// 
//   val builder =
//     new RouteBuilder {
//       "direct:a" ==> {
//         aggregate (_.in[String].substring(0, 7), new UseLatestAggregationStrategy()) completionSize(100) to "mock:a" }
// 
//       "direct:b" ==> {
//         aggregate(_.in[String].substring(0,7), new UseLatestAggregationStrategy()).completionSize(100) {
//           to ("mock:b")
//         }
//       }
//     }  

// 
//   @Test def explode_filename {
//     // in: abcde.txt
//     // expect: 
//     // a / b / c / d / abcde.d / meta.info
//     // a / b / c / d / abcde.txt
//     test {
//       "direct:explode.filename" ! ("abcde.txt")
//     }
//   }
// 
//   @Test def run_pstotext_local {
//     
//     test {
//       "direct:create.script.pstotext" ! ("abcde.txt")
//     }
//   }
// 
// 
//   @Test def write_shell_script {
//     "mock:b" expect { _.received(
//       """
//       |#!/bin/bash
//       |echo "file:a"
//       |""".stripMargin
//       
//     ) } 
//     test {
//       "direct:script" ! (List("file:a", "file:b", "file:c"))
//     }
//   }
