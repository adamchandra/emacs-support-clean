package lib.core
package model


import play.api.db._
import anorm._
import anorm.SqlParser._
import java.util.Date

import play.api.Play.current

import scalaz.{Validation, Success, Failure}, Validation._, scalaz.syntax.validation._
import scalaz.syntax.std.option._

import securesocial.core.{AuthenticationMethod}
import securesocial.core.PasswordInfo

object UserPasswordInfo {
  val parser = {
    get[Pk[Long]]("id") ~
    get[Long]("user_id") ~
    get[String]("hasher") ~
    get[String]("password") ~
    get[Option[String]]("salt") map {
      case (id ~ userId ~ hasher ~ password ~ salt) => 
        UserPasswordInfo(id.get, userId, hasher, password, salt)
    }
  }

  def create(userId: Long, pinfo: PasswordInfo): Validation[String, UserPasswordInfo] = {
    val oid = DB.withConnection { implicit connection =>
      SQL( """
        insert into password_info(id, user_id, hasher, password, salt)
        values ( NULL, {userId}, {hasher}, {password}, {salt} )
        """.stripMargin
      ).on (
        'userId -> userId,
        'hasher -> pinfo.hasher, 
        'password -> pinfo.password,
        'salt -> pinfo.salt
      ).executeInsert()
    }

    for {
      id <- oid.toSuccess("user password info insert failed")
      acc <- findById(id).toSuccess("user password info find on newly inserted failed")
    } yield acc
  }

  def forUser(userId: Long): Option[UserPasswordInfo] = { 
    DB.withConnection { implicit c =>
      SQL(
        """
        select id, user_id, hasher, password, salt
        from password_info
        where user_id = {userId};
        """
      ) on (
        'userId -> userId
      ) as (parser.singleOpt)
    }
  }

  def findById(id: Long): Option[UserPasswordInfo] = { 
    DB.withConnection { implicit c =>
      SQL(
        """
        select id, user_id, hasher, password, salt
        from password_info
        where id = {id};
        """
      ) on (
        'id -> id
      ) as (parser.singleOpt)
    }
  }



}

case class UserPasswordInfo(id:Long, userId:Long, hasher: String, password: String, salt: Option[String]) {
  def toPasswordInfo = PasswordInfo(hasher, password, salt)
}
