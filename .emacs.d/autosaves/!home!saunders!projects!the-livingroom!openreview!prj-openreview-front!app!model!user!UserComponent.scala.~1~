package model.user


/**
 * @author <a href="mailto:dev@davidsoergel.com">David Soergel</a>
 */
case class UserProfileComponent(user: User) {

  val actions: List[DocumentAction] = DocumentAction.allActions
  //actionsByEventType(epov)
  val defaultAction: Option[DocumentAction] = actions.headOption
  val responses: Traversable[DocumentPoVComponent] = dpov.responsesPoV map (DocumentPoVComponent(_))

  def doc = dpov.doc
  def compare(that: DocumentPoVComponent) = dpov.compare(that.dpov)

  def title: String = dpov.doc.title.unwrap
  def summary: String = dpov.doc.summary.unwrap
  def authors: String = dpov.doc.authors.map(_.name).getOrElse("Unknown Author")
  def uuid: String = dpov.doc.uuid.toString
  def created: DateTime = dpov.doc.created
  def numResponses: Int = dpov.numAllResponsesPoV
  def latestResponseDate: Option[DateTime] = dpov.responsesPoV.map(_.doc.created).toSeq.sortBy(_.getMillis).headOption

  def revisions: Traversable[DocumentPoVComponent] = dpov.revisionsPoV.map(DocumentPoVComponent(_))
  def getRoot: DocumentPoV = dpov.getRoot

  def worldReadable: Boolean = World.isLicensed(doc)
  
  //** combine with EventPoVFilter
  def todoCount : Int = dpov.todoCount
  def waitingCount : Int = dpov.waitingCount
  
  // we'll show only the "directly visible" ones, and make the Forwards and CarbonCopies responsible to display their own originals
  def events : Traversable[model.event.EventPoVComponent] =  dpov.eventsPoV.filter(_.isDirectlyVisible).map(EventPoVComponent(_))
  def endorsements : Traversable[String] = dpov.endorsementsPoV.map(_.doc.creator.name)
}

case class UrlDocumentPoVComponent(override val dpov: UrlDocumentPoV) extends DocumentPoVComponent(dpov) {
  def url: String = dpov.doc.url.toString
}

case class PlainTextDocumentPoVComponent(override val dpov: PlainTextDocumentPoV) extends DocumentPoVComponent(dpov)
case class EndorsementPoVComponent(override val dpov: EndorsementPoV) extends DocumentPoVComponent(dpov)

object DocumentPoVComponent {
  def apply(dpov: DocumentPoV): DocumentPoVComponent = dpov match {
    case e: UrlDocumentPoV => UrlDocumentPoVComponent(e)
    case e: PlainTextDocumentPoV => PlainTextDocumentPoVComponent(e)
    case e: EndorsementPoV => EndorsementPoVComponent(e)
  }
}
