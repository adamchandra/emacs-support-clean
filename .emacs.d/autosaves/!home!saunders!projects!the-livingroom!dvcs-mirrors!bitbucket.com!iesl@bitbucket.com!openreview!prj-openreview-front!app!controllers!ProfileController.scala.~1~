package controllers

import nav.nav
import lib._
import lib.core._
import net.openreview.model.users._
import _root_.model.user.UserProfileComponent

import play.api._
import play.api.mvc._

import play.api.data._
import play.api.data.Forms._
import play.api.data.validation.Constraints._
import play.api.data.validation._
import play.api.data.format.Formats._
import play.api.i18n.Messages

import securesocial.core._
import play.api.libs.json.Json._

import ScalateOps._
// import net.openreview.model.UserStorage
import net.openreview.model.UserStorage._

object ProfileController extends Controller with ControllerOps  {

 def show() = UserAction { implicit request => implicit user =>
   Ok(scalate("profile")(
     'request -> request,
     'user -> user,
     'profile -> UserProfileComponent(user.get),
     'authProviders -> Registry.providers.all().values, 
     'inviteForm -> inviteForm
   ))
 }


  case class Invite(emails: String)

  val inviteForm = Form[Invite](
    mapping(
      "emails" -> text
    )(Invite.apply)(Invite.unapply))

  def invitePostback() = UserAction { implicit request => implicit user =>
    inviteForm.bindFromRequest.fold (
      errors => {
        BadRequest(scalate("profile")(
          'request -> request,
          'user -> user,
          'profile -> UserProfileComponent(user.get),
          'inviteForm -> errors
        ))
      },
      info => {
        Redirect("/profile")
      }
    )
  }

  def verifyEmail(emailIndex: Int) = UserAction { implicit request => implicit ouser =>
    // create verification token
    val user = ouser.get
    val toVerify = user.emails.toList(emailIndex)
    val tok = tokenStore.createIfNeeded(ActionToken(EmailVerificationAction(user.id, toVerify.email)))

    sendEmail(
      subject="openreview.net: please verify email address", 
      recipient=toVerify.email, 
      body="\n"+tok.id+"\n"
    )


    // ?? check if outstanding token and display unverified email 
    // send email to specified unverified email address
    Ok(viewJson(
      UserProfileComponent(user), "email")(
      'i -> emailIndex,
      'emails -> user.emails
    ))
  }

  def setPrimaryEmail(emailIndex: Int) = UserAction { implicit request => implicit user =>
    Ok(viewJson(
      UserProfileComponent(user.get), "email")(
      'i -> emailIndex,
      'emails -> user.get.emails
    ))
  }

  def updateEmail(emailId:Long, action: String) = UserAction { implicit request => implicit user =>
    action match {
      case "index" => // noop, just redisplay
      case "removepassword" => {
      }
      case "verify" => {
      }
      case "setprimary" => {
      }
      case "makepublic" => {
      }
      case "makeprivate" => {
      }
      case _ => {
      }
    }
    Ok(viewJson(
      UserProfileComponent(user.get), "email")(
      'i -> emailId,
      'emails -> user.get.emails
    ))
  }

  
}

