* BOOKMARKS



*** RC Files
    [[/home/saunders/.emacs.d/init.el][.emacs.d/init.el]]
    // [[elisp:(byte-compile-file "/home/saunders/.emacs")][byte-compile .emacs]

*** Org files

    [[file:./code-reviews.org][Software notes (useful stuff found serendipitously)]]
    [[file:./index.org][Index]]
    [[file:./daily-practice.org][Daily Practice]]
    [[file:./uncategorized-notes.org][Uncategorized Notes]]
    [[file:./rexa-reboot-project.org][Rexa-reboot-project]]
    [[file:./project-misc.org][Project Miscellany]]
    [[file:./rosettacode-links.org][Rosetta Code]]
    [[file:./functional-programming-progress.org][Functional programming progress]]
    [[file:./annotation-tooling.org][Annotation Tooling]]


*** Inspiration: 
    http://blog.visual.ly/

*** Incorporate graphviz back end into scala tools for viewing and manipulating neo4j/mongo graphs
    http://www.graphviz.org/


*** Matrix visualization for network graphs
    http://www.lri.fr/~nhenry/docs/Henry-InfoVis2006.pdf





object Async extends Application {
  import scalaz._
  import Scalaz._
  import concurrent._
  // import concurrent.strategy._
  import java.util.concurrent.{ExecutorService, Executors, Executor}

  case class ResultA(resultb: ResultB, resulta: ResultC)
  case class ResultB()
  case class ResultC()

//  // run

  def run {
    implicit val executor: ExecutorService = Executors.newFixedThreadPool(8)
    import Executor.strategy

    val promiseA = doA
    println("waiting for results")
    val a: ResultA = promiseA.get
    println("got " + a)
    executor.shutdown    
  }

  def doA(implicit s: Strategy): Promise[ResultA] = {
    println("triggered A")
    val b = doB
    val c = doC
    for {bb <- b; cc <- c} yield ResultA(bb, cc)
  }

  def doB(implicit s: Strategy[Unit]): Promise[ResultB] = {
    println("triggered B")
    promise { Thread.sleep(1000); println("returning B"); ResultB() }
  }

  def doC(implicit s: Strategy[Unit]): Promise[ResultC] = {
    println("triggered C")
    promise { Thread.sleep(1000); println("returning C"); ResultC() }
  }
}





