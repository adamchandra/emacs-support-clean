
import scalaz._
import Scalaz._


object kindPrinter {
  // This only seems to work by pasting into a console under M7

  // requires Scala 2.10.0-M7
  // import scala.reflect.api._
  import scala.reflect.runtime.universe._

  def kind[A: TypeTag]: String = {
    def typeKind(sig: Type): String = sig match {
      case PolyType(params, resultType) =>
        (params map { p =>
          typeKind(p.typeSignature) match {
            case "*" => "*"
            case s   => "(" + s + ")"
          }
        }).mkString(" -> ") + " -> *"
      case _ => "*"
    }
    def typeSig(tpe: Type): Type = tpe match {
      case SingleType(pre, sym) => sym.companionSymbol.typeSignature
      case ExistentialType(q, TypeRef(pre, sym, args)) => sym.typeSignature
      case TypeRef(pre, sym, args) => sym.typeSignature
    }
    val sig = typeSig(typeOf[A])
    val s = typeKind(sig)
    sig.typeSymbol.name + "'s kind is " + s + ". " + (s match {
      case "*" =>
        "This is a proper type."
      case x if !(x contains "(") =>
        "This is a type constructor: a 1st-order-kinded type."
      case x =>
        "This is a type constructor that takes type constructor(s): a higher-kinded type."
    })
  }
}
