package net.openreview.model
package mongodb

import java.util.UUID
import java.util.{Date}
import com.novus.salat._
import com.novus.salat.dao._
import com.novus.salat.annotations._
import com.mongodb.casbah.Imports._
import se.radley.plugin.salat._
import com.novus.salat.global._

import com.mongodb.casbah.commons.conversions._
import com.mongodb.casbah.commons.conversions.scala._
import org.bson.{ BSON, Transformer }
import java.net.{URL, URLEncoder}

object RegisterURLHelpers extends URLSerializer with URLDeserializer {
  def apply() = {
    log.debug("Registering URL Serializers.")
    super.register()
  }
}

trait URLSerializer extends MongoConversionHelper {

  private val encodeType = classOf[URL]
  /** Encoding hook for MongoDB To be able to persist URL to MongoDB */
  private val transformer = new Transformer {
    log.debug("Encoding a URL")

    def transform(o: AnyRef): AnyRef = o match {
      case url: java.net.URL => url.toExternalForm() 
      case _ => o
    }
  }

  override def register() = {
    log.debug("Hooking up java.net.URL serializer.")
    BSON.addEncodingHook(encodeType, transformer)
    super.register()
  }

  override def unregister() = {
    log.debug("De-registering java.net.URL serializer.")
    BSON.removeEncodingHooks(encodeType)
    super.unregister()
  }
}

trait URLDeserializer extends MongoConversionHelper {
  private val encodeType = classOf[URL]
  private val transformer = new Transformer {
    log.debug("Decoding java.net.URL")

    def transform(o: AnyRef): AnyRef = o match {
      case url: String => new URL(url)
      case _ => o
    }
  }

  override def register() = {
    log.debug("Hooking up java.net.URL deserializer")
    /** Encoding hook for MongoDB To be able to read URL DateTime from MongoDB's BSON Date */
    BSON.addDecodingHook(encodeType, transformer)
    super.register()
  }

  override def unregister() = {
    log.debug("De-registering java.net.URL  deserializer.")
    BSON.removeDecodingHooks(encodeType)
    super.unregister()
  }
}
