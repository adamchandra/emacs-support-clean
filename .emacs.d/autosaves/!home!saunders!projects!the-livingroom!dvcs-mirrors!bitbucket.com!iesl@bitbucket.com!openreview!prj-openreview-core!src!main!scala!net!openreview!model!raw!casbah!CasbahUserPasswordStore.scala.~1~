package net.openreview.model.raw.casbah

import CasbahUserPasswordStore._
import collection.mutable
import com.mongodb.casbah.Imports._
import com.mongodb.casbah.commons.Imports
import java.util.UUID
import net.openreview.model.raw.users._
import net.openreview.model.raw.Event





/**
 * @author <a href="mailto:dev@davidsoergel.com">David Soergel</a>
 */
class CasbahUserPasswordStore(conn: MongoConnection,
  dbname: String,
  collname: String
) extends UserPasswordStore with CasbahPatchableStore {

  val mongoColl = conn(dbname)(collname)

  mongoColl.ensureIndex(
    keys=MongoDBObject (
      "providerKey" -> 1,
      "providerUserId" -> 1
    ),
    name=collname+".index.1",
    unique=true
  )

  def createIfNeeded(acc: UserPassword): UserPassword = {
    mongoColl.findOne(
      MongoDBObject(
        "providerKey" -> acc.providerKey,
        "providerUserId" -> acc.providerUserId
      )
    ).map(
      linkedAccountFromDb(_)
    ).getOrElse({
      val result = linkedAccountToDb(acc).dbo
      mongoColl += result
      acc
    })
    // mongoColl.findOne(MongoDBObject("_id" -> acc.id)).map(linkedAccountFromDb(_)).getOrElse({
    //   val result = linkedAccountToDb(acc).dbo
    //   mongoColl += result
    //   acc
    // })
  }

  def get(uuid: UUID) = {
    val r = mongoColl.findOne(MongoDBObject("_id" -> uuid))
    r.map(linkedAccountFromDb(_))
  }

  def findByProviderId(providerKey: String, providerUserId: String) = {
    val r = mongoColl.findOne(MongoDBObject("providerUserId" -> providerUserId)) //"providerKey" -> providerKey, 
    r.map(linkedAccountFromDb(_))
  }

  def forUser(userId: UUID) = {
    val r = mongoColl.find(MongoDBObject("userId" -> userId))
    r.map(linkedAccountFromDb(_)).toSeq
  }

  def foreach[U](f: (UserPassword) => U) {
    mongoColl.foreach(dbo => f(linkedAccountFromDb(dbo)))
  }
}

// for symmetry with complicated types requiring matching on type hint
object CasbahUserPasswordStore {
  def linkedAccountFromDb(dbo: MongoDBObject): UserPassword = new MongoUserPassword(dbo)

  def linkedAccountToDb(e: UserPassword): MongoWrapper = MongoUserPassword.toDb(e)
}

object MongoUserPassword extends MongoSerializer[UserPassword, MongoUserPassword]("linkedAccount",
  new MongoUserPassword(_)) {
  def addFields(e: UserPassword, builder: mutable.Builder[(String, Any), Imports.DBObject]) {
    builder += "_id" -> e.id
    builder += "userId" -> e.userId
    builder += "providerUserId" -> e.providerUserId
    builder += "providerKey" -> e.providerKey
    builder += "authMethod" -> e.authMethod
  }
}

class MongoUserPassword(val dbo: MongoDBObject) extends UserPassword with MongoWrapper {
  def authMethod = dbo.as[String]("authMethod")
  def id = dbo.as[UUID]("_id")
  def providerKey = dbo.as[String]("providerKey")
  def providerUserId = dbo.as[String]("providerUserId")
  def userId = dbo.as[UUID]("userId")
}
