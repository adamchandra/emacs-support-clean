/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cc.rexa2.camel.test

import org.apache.camel

import camel.component.mock.MockEndpoint
import camel.test.junit4.CamelTestSupport
import camel.Exchange
import camel.scala.Preamble
import camel.scala.dsl.builder.{RouteBuilder,RouteBuilderSupport}

import scala.collection.mutable.ArrayBuffer

import org.apache.camel.component.mock.MockEndpoint

class RichMockEndpoint(val endpoint: MockEndpoint) {

  def received(messages: AnyRef*) {
    val list = new java.util.ArrayList[AnyRef](messages.length)
    messages.foreach(list.add(_))
    endpoint.expectedBodiesReceived(list)
  }
  
  def headerReceived(name: String, value: String) {
    endpoint.expectedHeaderReceived(name, value)
  }

  def count : Int = endpoint.getExpectedCount
  
  def count_=(count: Int) = endpoint.expectedMessageCount(count)
}


class RichTestUri(uri: String, support: ScalaTestSupport) {

  def !(messages: Any*) = {
    messages.foreach { 
      _ match {
        case exchange: Exchange => support.getTemplate().send(uri, exchange)
        case anything: Any => support.getTemplate().sendBody(uri, anything)
      }
    }
  }

  def expect(block: MockEndpoint => Unit) = {
    val mock = support.mock(uri)
    block(mock)
  }

  def assert() = support.mock(uri).assertIsSatisfied()

}

abstract class ScalaTestSupport extends CamelTestSupport with RouteBuilderSupport with Preamble {
  
  implicit def stringToUri(uri:String) = new RichTestUri(uri, this)
  implicit def mockWrapper(endpoint: MockEndpoint) = new RichMockEndpoint(endpoint)

  val endpoints = new ArrayBuffer[MockEndpoint]()

  def assert(uri: String) = getMockEndpoint(uri).assertIsSatisfied

  def getTemplate() = template

  def mock(uri: String) = {
    val mock = getMockEndpoint(uri)
    endpoints += mock
    mock
  }

  def in(message: Any) : Exchange =  createExchangeWithBody(message)
  
  val builder : RouteBuilder
  
  override def createRouteBuilder = builder
  
  override def setUp = {
    super.setUp
    endpoints.foreach(_.reset())
  }
  
  def test(block : => Unit) = {
    block
    endpoints.foreach(_.assertIsSatisfied)
  }

  override def createJndiContext = {
    jndi match {
      case Some(map) => {
        val context = super.createJndiContext
        map.foreach({case (key, value) => context.bind(key, value) })
        context
      }
      case None => super.createJndiContext
    }
  }

  def jndi : Option[Map[String, Any]] = None
}
